/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tokyo.northside.odapi.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import tokyo.northside.odapi.model.BilingualSenseConstructions;
import tokyo.northside.odapi.model.DatasetCrossLink;
import tokyo.northside.odapi.model.DomainClassesList;
import tokyo.northside.odapi.model.DomainsList;
import tokyo.northside.odapi.model.InflectedForm;
import tokyo.northside.odapi.model.RegionsList;
import tokyo.northside.odapi.model.RegistersList;
import tokyo.northside.odapi.model.SemanticClassesList;
import tokyo.northside.odapi.model.ThesaurusLink;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for BilingualSense
 */
public class BilingualSenseTest {
    private final BilingualSense model = new BilingualSense();

    /**
     * Model tests for BilingualSense
     */
    @Test
    public void testBilingualSense() {
        // TODO: test BilingualSense
    }

    /**
     * Test the property 'antonyms'
     */
    @Test
    public void antonymsTest() {
        // TODO: test antonyms
    }

    /**
     * Test the property 'constructions'
     */
    @Test
    public void constructionsTest() {
        // TODO: test constructions
    }

    /**
     * Test the property 'crossReferenceMarkers'
     */
    @Test
    public void crossReferenceMarkersTest() {
        // TODO: test crossReferenceMarkers
    }

    /**
     * Test the property 'crossReferences'
     */
    @Test
    public void crossReferencesTest() {
        // TODO: test crossReferences
    }

    /**
     * Test the property 'datasetCrossLinks'
     */
    @Test
    public void datasetCrossLinksTest() {
        // TODO: test datasetCrossLinks
    }

    /**
     * Test the property 'definitions'
     */
    @Test
    public void definitionsTest() {
        // TODO: test definitions
    }

    /**
     * Test the property 'domainClasses'
     */
    @Test
    public void domainClassesTest() {
        // TODO: test domainClasses
    }

    /**
     * Test the property 'domains'
     */
    @Test
    public void domainsTest() {
        // TODO: test domains
    }

    /**
     * Test the property 'etymologies'
     */
    @Test
    public void etymologiesTest() {
        // TODO: test etymologies
    }

    /**
     * Test the property 'examples'
     */
    @Test
    public void examplesTest() {
        // TODO: test examples
    }

    /**
     * Test the property 'id'
     */
    @Test
    public void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'inflections'
     */
    @Test
    public void inflectionsTest() {
        // TODO: test inflections
    }

    /**
     * Test the property 'notes'
     */
    @Test
    public void notesTest() {
        // TODO: test notes
    }

    /**
     * Test the property 'pronunciations'
     */
    @Test
    public void pronunciationsTest() {
        // TODO: test pronunciations
    }

    /**
     * Test the property 'regions'
     */
    @Test
    public void regionsTest() {
        // TODO: test regions
    }

    /**
     * Test the property 'registers'
     */
    @Test
    public void registersTest() {
        // TODO: test registers
    }

    /**
     * Test the property 'semanticClasses'
     */
    @Test
    public void semanticClassesTest() {
        // TODO: test semanticClasses
    }

    /**
     * Test the property 'shortDefinitions'
     */
    @Test
    public void shortDefinitionsTest() {
        // TODO: test shortDefinitions
    }

    /**
     * Test the property 'subsenses'
     */
    @Test
    public void subsensesTest() {
        // TODO: test subsenses
    }

    /**
     * Test the property 'synonyms'
     */
    @Test
    public void synonymsTest() {
        // TODO: test synonyms
    }

    /**
     * Test the property 'thesaurusLinks'
     */
    @Test
    public void thesaurusLinksTest() {
        // TODO: test thesaurusLinks
    }

    /**
     * Test the property 'translations'
     */
    @Test
    public void translationsTest() {
        // TODO: test translations
    }

    /**
     * Test the property 'variantForms'
     */
    @Test
    public void variantFormsTest() {
        // TODO: test variantForms
    }

}
