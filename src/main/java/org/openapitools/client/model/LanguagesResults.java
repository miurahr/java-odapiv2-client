/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.LanguagesSourceLanguage;
import org.openapitools.client.model.LanguagesTargetLanguage;

/**
 * LanguagesResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-26T13:13:15.302+09:00[Asia/Tokyo]")
public class LanguagesResults {
  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_SOURCE_LANGUAGE = "sourceLanguage";
  @SerializedName(SERIALIZED_NAME_SOURCE_LANGUAGE)
  private LanguagesSourceLanguage sourceLanguage;

  public static final String SERIALIZED_NAME_TARGET_LANGUAGE = "targetLanguage";
  @SerializedName(SERIALIZED_NAME_TARGET_LANGUAGE)
  private LanguagesTargetLanguage targetLanguage;

  /**
   * whether monolingual or bilingual.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    MONOLINGUAL("monolingual"),
    
    BILINGUAL("bilingual"),
    
    OTHER("other");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public LanguagesResults() { 
  }

  public LanguagesResults region(String region) {
    
    this.region = region;
    return this;
  }

   /**
   * Name of region.
   * @return region
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of region.")

  public String getRegion() {
    return region;
  }


  public void setRegion(String region) {
    this.region = region;
  }


  public LanguagesResults source(String source) {
    
    this.source = source;
    return this;
  }

   /**
   * Name of source dictionary.
   * @return source
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of source dictionary.")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    this.source = source;
  }


  public LanguagesResults sourceLanguage(LanguagesSourceLanguage sourceLanguage) {
    
    this.sourceLanguage = sourceLanguage;
    return this;
  }

   /**
   * Get sourceLanguage
   * @return sourceLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LanguagesSourceLanguage getSourceLanguage() {
    return sourceLanguage;
  }


  public void setSourceLanguage(LanguagesSourceLanguage sourceLanguage) {
    this.sourceLanguage = sourceLanguage;
  }


  public LanguagesResults targetLanguage(LanguagesTargetLanguage targetLanguage) {
    
    this.targetLanguage = targetLanguage;
    return this;
  }

   /**
   * Get targetLanguage
   * @return targetLanguage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public LanguagesTargetLanguage getTargetLanguage() {
    return targetLanguage;
  }


  public void setTargetLanguage(LanguagesTargetLanguage targetLanguage) {
    this.targetLanguage = targetLanguage;
  }


  public LanguagesResults type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * whether monolingual or bilingual.
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "whether monolingual or bilingual.")

  public TypeEnum getType() {
    return type;
  }


  public void setType(TypeEnum type) {
    this.type = type;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LanguagesResults languagesResults = (LanguagesResults) o;
    return Objects.equals(this.region, languagesResults.region) &&
        Objects.equals(this.source, languagesResults.source) &&
        Objects.equals(this.sourceLanguage, languagesResults.sourceLanguage) &&
        Objects.equals(this.targetLanguage, languagesResults.targetLanguage) &&
        Objects.equals(this.type, languagesResults.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(region, source, sourceLanguage, targetLanguage, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LanguagesResults {\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    sourceLanguage: ").append(toIndentedString(sourceLanguage)).append("\n");
    sb.append("    targetLanguage: ").append(toIndentedString(targetLanguage)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

