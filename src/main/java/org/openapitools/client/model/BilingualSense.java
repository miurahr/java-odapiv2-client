/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.BilingualSenseConstructions;
import org.openapitools.client.model.DatasetCrossLink;
import org.openapitools.client.model.DomainClassesList;
import org.openapitools.client.model.DomainsList;
import org.openapitools.client.model.InflectedForm;
import org.openapitools.client.model.RegionsList;
import org.openapitools.client.model.RegistersList;
import org.openapitools.client.model.SemanticClassesList;
import org.openapitools.client.model.ThesaurusLink;

/**
 * A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element
 */
@ApiModel(description = "A lexical sense represents the lexical meaning of a lexical entry when interpreted as referring to the corresponding ontology element")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-26T13:13:15.302+09:00[Asia/Tokyo]")
public class BilingualSense {
  public static final String SERIALIZED_NAME_ANTONYMS = "antonyms";
  @SerializedName(SERIALIZED_NAME_ANTONYMS)
  private List<Object> antonyms = null;

  public static final String SERIALIZED_NAME_CONSTRUCTIONS = "constructions";
  @SerializedName(SERIALIZED_NAME_CONSTRUCTIONS)
  private List<BilingualSenseConstructions> constructions = null;

  public static final String SERIALIZED_NAME_CROSS_REFERENCE_MARKERS = "crossReferenceMarkers";
  @SerializedName(SERIALIZED_NAME_CROSS_REFERENCE_MARKERS)
  private List<String> crossReferenceMarkers = null;

  public static final String SERIALIZED_NAME_CROSS_REFERENCES = "crossReferences";
  @SerializedName(SERIALIZED_NAME_CROSS_REFERENCES)
  private List<Object> crossReferences = null;

  public static final String SERIALIZED_NAME_DATASET_CROSS_LINKS = "datasetCrossLinks";
  @SerializedName(SERIALIZED_NAME_DATASET_CROSS_LINKS)
  private List<DatasetCrossLink> datasetCrossLinks = null;

  public static final String SERIALIZED_NAME_DEFINITIONS = "definitions";
  @SerializedName(SERIALIZED_NAME_DEFINITIONS)
  private List<String> definitions = null;

  public static final String SERIALIZED_NAME_DOMAIN_CLASSES = "domainClasses";
  @SerializedName(SERIALIZED_NAME_DOMAIN_CLASSES)
  private DomainClassesList domainClasses;

  public static final String SERIALIZED_NAME_DOMAINS = "domains";
  @SerializedName(SERIALIZED_NAME_DOMAINS)
  private DomainsList domains;

  public static final String SERIALIZED_NAME_ETYMOLOGIES = "etymologies";
  @SerializedName(SERIALIZED_NAME_ETYMOLOGIES)
  private List<String> etymologies = null;

  public static final String SERIALIZED_NAME_EXAMPLES = "examples";
  @SerializedName(SERIALIZED_NAME_EXAMPLES)
  private List<Object> examples = null;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INFLECTIONS = "inflections";
  @SerializedName(SERIALIZED_NAME_INFLECTIONS)
  private List<InflectedForm> inflections = null;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<Object> notes = null;

  public static final String SERIALIZED_NAME_PRONUNCIATIONS = "pronunciations";
  @SerializedName(SERIALIZED_NAME_PRONUNCIATIONS)
  private List<Object> pronunciations = null;

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private RegionsList regions;

  public static final String SERIALIZED_NAME_REGISTERS = "registers";
  @SerializedName(SERIALIZED_NAME_REGISTERS)
  private RegistersList registers;

  public static final String SERIALIZED_NAME_SEMANTIC_CLASSES = "semanticClasses";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_CLASSES)
  private SemanticClassesList semanticClasses;

  public static final String SERIALIZED_NAME_SHORT_DEFINITIONS = "shortDefinitions";
  @SerializedName(SERIALIZED_NAME_SHORT_DEFINITIONS)
  private List<String> shortDefinitions = null;

  public static final String SERIALIZED_NAME_SUBSENSES = "subsenses";
  @SerializedName(SERIALIZED_NAME_SUBSENSES)
  private List<BilingualSense> subsenses = null;

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  private List<Object> synonyms = null;

  public static final String SERIALIZED_NAME_THESAURUS_LINKS = "thesaurusLinks";
  @SerializedName(SERIALIZED_NAME_THESAURUS_LINKS)
  private List<ThesaurusLink> thesaurusLinks = null;

  public static final String SERIALIZED_NAME_TRANSLATIONS = "translations";
  @SerializedName(SERIALIZED_NAME_TRANSLATIONS)
  private List<Object> translations = null;

  public static final String SERIALIZED_NAME_VARIANT_FORMS = "variantForms";
  @SerializedName(SERIALIZED_NAME_VARIANT_FORMS)
  private List<Object> variantForms = null;

  public BilingualSense() { 
  }

  public BilingualSense antonyms(List<Object> antonyms) {
    
    this.antonyms = antonyms;
    return this;
  }

  public BilingualSense addAntonymsItem(Object antonymsItem) {
    if (this.antonyms == null) {
      this.antonyms = new ArrayList<Object>();
    }
    this.antonyms.add(antonymsItem);
    return this;
  }

   /**
   * Get antonyms
   * @return antonyms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getAntonyms() {
    return antonyms;
  }


  public void setAntonyms(List<Object> antonyms) {
    this.antonyms = antonyms;
  }


  public BilingualSense constructions(List<BilingualSenseConstructions> constructions) {
    
    this.constructions = constructions;
    return this;
  }

  public BilingualSense addConstructionsItem(BilingualSenseConstructions constructionsItem) {
    if (this.constructions == null) {
      this.constructions = new ArrayList<BilingualSenseConstructions>();
    }
    this.constructions.add(constructionsItem);
    return this;
  }

   /**
   * A construction provides information about typical syntax used of this sense. Each construction may optionally have one or more examples. Constructions may be translated if there is an equivalent in the target language.
   * @return constructions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A construction provides information about typical syntax used of this sense. Each construction may optionally have one or more examples. Constructions may be translated if there is an equivalent in the target language.")

  public List<BilingualSenseConstructions> getConstructions() {
    return constructions;
  }


  public void setConstructions(List<BilingualSenseConstructions> constructions) {
    this.constructions = constructions;
  }


  public BilingualSense crossReferenceMarkers(List<String> crossReferenceMarkers) {
    
    this.crossReferenceMarkers = crossReferenceMarkers;
    return this;
  }

  public BilingualSense addCrossReferenceMarkersItem(String crossReferenceMarkersItem) {
    if (this.crossReferenceMarkers == null) {
      this.crossReferenceMarkers = new ArrayList<String>();
    }
    this.crossReferenceMarkers.add(crossReferenceMarkersItem);
    return this;
  }

   /**
   * Get crossReferenceMarkers
   * @return crossReferenceMarkers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCrossReferenceMarkers() {
    return crossReferenceMarkers;
  }


  public void setCrossReferenceMarkers(List<String> crossReferenceMarkers) {
    this.crossReferenceMarkers = crossReferenceMarkers;
  }


  public BilingualSense crossReferences(List<Object> crossReferences) {
    
    this.crossReferences = crossReferences;
    return this;
  }

  public BilingualSense addCrossReferencesItem(Object crossReferencesItem) {
    if (this.crossReferences == null) {
      this.crossReferences = new ArrayList<Object>();
    }
    this.crossReferences.add(crossReferencesItem);
    return this;
  }

   /**
   * A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.
   * @return crossReferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.")

  public List<Object> getCrossReferences() {
    return crossReferences;
  }


  public void setCrossReferences(List<Object> crossReferences) {
    this.crossReferences = crossReferences;
  }


  public BilingualSense datasetCrossLinks(List<DatasetCrossLink> datasetCrossLinks) {
    
    this.datasetCrossLinks = datasetCrossLinks;
    return this;
  }

  public BilingualSense addDatasetCrossLinksItem(DatasetCrossLink datasetCrossLinksItem) {
    if (this.datasetCrossLinks == null) {
      this.datasetCrossLinks = new ArrayList<DatasetCrossLink>();
    }
    this.datasetCrossLinks.add(datasetCrossLinksItem);
    return this;
  }

   /**
   * List of links to entries in other datasets
   * @return datasetCrossLinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of links to entries in other datasets")

  public List<DatasetCrossLink> getDatasetCrossLinks() {
    return datasetCrossLinks;
  }


  public void setDatasetCrossLinks(List<DatasetCrossLink> datasetCrossLinks) {
    this.datasetCrossLinks = datasetCrossLinks;
  }


  public BilingualSense definitions(List<String> definitions) {
    
    this.definitions = definitions;
    return this;
  }

  public BilingualSense addDefinitionsItem(String definitionsItem) {
    if (this.definitions == null) {
      this.definitions = new ArrayList<String>();
    }
    this.definitions.add(definitionsItem);
    return this;
  }

   /**
   * Get definitions
   * @return definitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getDefinitions() {
    return definitions;
  }


  public void setDefinitions(List<String> definitions) {
    this.definitions = definitions;
  }


  public BilingualSense domainClasses(DomainClassesList domainClasses) {
    
    this.domainClasses = domainClasses;
    return this;
  }

   /**
   * Get domainClasses
   * @return domainClasses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DomainClassesList getDomainClasses() {
    return domainClasses;
  }


  public void setDomainClasses(DomainClassesList domainClasses) {
    this.domainClasses = domainClasses;
  }


  public BilingualSense domains(DomainsList domains) {
    
    this.domains = domains;
    return this;
  }

   /**
   * Get domains
   * @return domains
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DomainsList getDomains() {
    return domains;
  }


  public void setDomains(DomainsList domains) {
    this.domains = domains;
  }


  public BilingualSense etymologies(List<String> etymologies) {
    
    this.etymologies = etymologies;
    return this;
  }

  public BilingualSense addEtymologiesItem(String etymologiesItem) {
    if (this.etymologies == null) {
      this.etymologies = new ArrayList<String>();
    }
    this.etymologies.add(etymologiesItem);
    return this;
  }

   /**
   * Get etymologies
   * @return etymologies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getEtymologies() {
    return etymologies;
  }


  public void setEtymologies(List<String> etymologies) {
    this.etymologies = etymologies;
  }


  public BilingualSense examples(List<Object> examples) {
    
    this.examples = examples;
    return this;
  }

  public BilingualSense addExamplesItem(Object examplesItem) {
    if (this.examples == null) {
      this.examples = new ArrayList<Object>();
    }
    this.examples.add(examplesItem);
    return this;
  }

   /**
   * A list of written or spoken rendering of examples of use of a word or text
   * @return examples
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken rendering of examples of use of a word or text")

  public List<Object> getExamples() {
    return examples;
  }


  public void setExamples(List<Object> examples) {
    this.examples = examples;
  }


  public BilingualSense id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The id of the sense that is required for the delete procedure
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the sense that is required for the delete procedure")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    this.id = id;
  }


  public BilingualSense inflections(List<InflectedForm> inflections) {
    
    this.inflections = inflections;
    return this;
  }

  public BilingualSense addInflectionsItem(InflectedForm inflectionsItem) {
    if (this.inflections == null) {
      this.inflections = new ArrayList<InflectedForm>();
    }
    this.inflections.add(inflectionsItem);
    return this;
  }

   /**
   * A list of inflected forms for a sense.
   * @return inflections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of inflected forms for a sense.")

  public List<InflectedForm> getInflections() {
    return inflections;
  }


  public void setInflections(List<InflectedForm> inflections) {
    this.inflections = inflections;
  }


  public BilingualSense notes(List<Object> notes) {
    
    this.notes = notes;
    return this;
  }

  public BilingualSense addNotesItem(Object notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<Object>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * various types of notes that appear
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "various types of notes that appear")

  public List<Object> getNotes() {
    return notes;
  }


  public void setNotes(List<Object> notes) {
    this.notes = notes;
  }


  public BilingualSense pronunciations(List<Object> pronunciations) {
    
    this.pronunciations = pronunciations;
    return this;
  }

  public BilingualSense addPronunciationsItem(Object pronunciationsItem) {
    if (this.pronunciations == null) {
      this.pronunciations = new ArrayList<Object>();
    }
    this.pronunciations.add(pronunciationsItem);
    return this;
  }

   /**
   * A list of possible pronunciations of a word
   * @return pronunciations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of possible pronunciations of a word")

  public List<Object> getPronunciations() {
    return pronunciations;
  }


  public void setPronunciations(List<Object> pronunciations) {
    this.pronunciations = pronunciations;
  }


  public BilingualSense regions(RegionsList regions) {
    
    this.regions = regions;
    return this;
  }

   /**
   * Get regions
   * @return regions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RegionsList getRegions() {
    return regions;
  }


  public void setRegions(RegionsList regions) {
    this.regions = regions;
  }


  public BilingualSense registers(RegistersList registers) {
    
    this.registers = registers;
    return this;
  }

   /**
   * Get registers
   * @return registers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RegistersList getRegisters() {
    return registers;
  }


  public void setRegisters(RegistersList registers) {
    this.registers = registers;
  }


  public BilingualSense semanticClasses(SemanticClassesList semanticClasses) {
    
    this.semanticClasses = semanticClasses;
    return this;
  }

   /**
   * Get semanticClasses
   * @return semanticClasses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SemanticClassesList getSemanticClasses() {
    return semanticClasses;
  }


  public void setSemanticClasses(SemanticClassesList semanticClasses) {
    this.semanticClasses = semanticClasses;
  }


  public BilingualSense shortDefinitions(List<String> shortDefinitions) {
    
    this.shortDefinitions = shortDefinitions;
    return this;
  }

  public BilingualSense addShortDefinitionsItem(String shortDefinitionsItem) {
    if (this.shortDefinitions == null) {
      this.shortDefinitions = new ArrayList<String>();
    }
    this.shortDefinitions.add(shortDefinitionsItem);
    return this;
  }

   /**
   * Get shortDefinitions
   * @return shortDefinitions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getShortDefinitions() {
    return shortDefinitions;
  }


  public void setShortDefinitions(List<String> shortDefinitions) {
    this.shortDefinitions = shortDefinitions;
  }


  public BilingualSense subsenses(List<BilingualSense> subsenses) {
    
    this.subsenses = subsenses;
    return this;
  }

  public BilingualSense addSubsensesItem(BilingualSense subsensesItem) {
    if (this.subsenses == null) {
      this.subsenses = new ArrayList<BilingualSense>();
    }
    this.subsenses.add(subsensesItem);
    return this;
  }

   /**
   * Ordered list of subsenses of a sense
   * @return subsenses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ordered list of subsenses of a sense")

  public List<BilingualSense> getSubsenses() {
    return subsenses;
  }


  public void setSubsenses(List<BilingualSense> subsenses) {
    this.subsenses = subsenses;
  }


  public BilingualSense synonyms(List<Object> synonyms) {
    
    this.synonyms = synonyms;
    return this;
  }

  public BilingualSense addSynonymsItem(Object synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<Object>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

   /**
   * Get synonyms
   * @return synonyms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Object> getSynonyms() {
    return synonyms;
  }


  public void setSynonyms(List<Object> synonyms) {
    this.synonyms = synonyms;
  }


  public BilingualSense thesaurusLinks(List<ThesaurusLink> thesaurusLinks) {
    
    this.thesaurusLinks = thesaurusLinks;
    return this;
  }

  public BilingualSense addThesaurusLinksItem(ThesaurusLink thesaurusLinksItem) {
    if (this.thesaurusLinks == null) {
      this.thesaurusLinks = new ArrayList<ThesaurusLink>();
    }
    this.thesaurusLinks.add(thesaurusLinksItem);
    return this;
  }

   /**
   * Ordered list of links to the Thesaurus Dictionary
   * @return thesaurusLinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Ordered list of links to the Thesaurus Dictionary")

  public List<ThesaurusLink> getThesaurusLinks() {
    return thesaurusLinks;
  }


  public void setThesaurusLinks(List<ThesaurusLink> thesaurusLinks) {
    this.thesaurusLinks = thesaurusLinks;
  }


  public BilingualSense translations(List<Object> translations) {
    
    this.translations = translations;
    return this;
  }

  public BilingualSense addTranslationsItem(Object translationsItem) {
    if (this.translations == null) {
      this.translations = new ArrayList<Object>();
    }
    this.translations.add(translationsItem);
    return this;
  }

   /**
   * A list of written or spoken rendering of the meaning of a word or text in another language(s)
   * @return translations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken rendering of the meaning of a word or text in another language(s)")

  public List<Object> getTranslations() {
    return translations;
  }


  public void setTranslations(List<Object> translations) {
    this.translations = translations;
  }


  public BilingualSense variantForms(List<Object> variantForms) {
    
    this.variantForms = variantForms;
    return this;
  }

  public BilingualSense addVariantFormsItem(Object variantFormsItem) {
    if (this.variantForms == null) {
      this.variantForms = new ArrayList<Object>();
    }
    this.variantForms.add(variantFormsItem);
    return this;
  }

   /**
   * Various words that are used interchangeably depending on the context, e.g &#39;aluminium&#39; and &#39;aluminum&#39;
   * @return variantForms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'")

  public List<Object> getVariantForms() {
    return variantForms;
  }


  public void setVariantForms(List<Object> variantForms) {
    this.variantForms = variantForms;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BilingualSense bilingualSense = (BilingualSense) o;
    return Objects.equals(this.antonyms, bilingualSense.antonyms) &&
        Objects.equals(this.constructions, bilingualSense.constructions) &&
        Objects.equals(this.crossReferenceMarkers, bilingualSense.crossReferenceMarkers) &&
        Objects.equals(this.crossReferences, bilingualSense.crossReferences) &&
        Objects.equals(this.datasetCrossLinks, bilingualSense.datasetCrossLinks) &&
        Objects.equals(this.definitions, bilingualSense.definitions) &&
        Objects.equals(this.domainClasses, bilingualSense.domainClasses) &&
        Objects.equals(this.domains, bilingualSense.domains) &&
        Objects.equals(this.etymologies, bilingualSense.etymologies) &&
        Objects.equals(this.examples, bilingualSense.examples) &&
        Objects.equals(this.id, bilingualSense.id) &&
        Objects.equals(this.inflections, bilingualSense.inflections) &&
        Objects.equals(this.notes, bilingualSense.notes) &&
        Objects.equals(this.pronunciations, bilingualSense.pronunciations) &&
        Objects.equals(this.regions, bilingualSense.regions) &&
        Objects.equals(this.registers, bilingualSense.registers) &&
        Objects.equals(this.semanticClasses, bilingualSense.semanticClasses) &&
        Objects.equals(this.shortDefinitions, bilingualSense.shortDefinitions) &&
        Objects.equals(this.subsenses, bilingualSense.subsenses) &&
        Objects.equals(this.synonyms, bilingualSense.synonyms) &&
        Objects.equals(this.thesaurusLinks, bilingualSense.thesaurusLinks) &&
        Objects.equals(this.translations, bilingualSense.translations) &&
        Objects.equals(this.variantForms, bilingualSense.variantForms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(antonyms, constructions, crossReferenceMarkers, crossReferences, datasetCrossLinks, definitions, domainClasses, domains, etymologies, examples, id, inflections, notes, pronunciations, regions, registers, semanticClasses, shortDefinitions, subsenses, synonyms, thesaurusLinks, translations, variantForms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BilingualSense {\n");
    sb.append("    antonyms: ").append(toIndentedString(antonyms)).append("\n");
    sb.append("    constructions: ").append(toIndentedString(constructions)).append("\n");
    sb.append("    crossReferenceMarkers: ").append(toIndentedString(crossReferenceMarkers)).append("\n");
    sb.append("    crossReferences: ").append(toIndentedString(crossReferences)).append("\n");
    sb.append("    datasetCrossLinks: ").append(toIndentedString(datasetCrossLinks)).append("\n");
    sb.append("    definitions: ").append(toIndentedString(definitions)).append("\n");
    sb.append("    domainClasses: ").append(toIndentedString(domainClasses)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    etymologies: ").append(toIndentedString(etymologies)).append("\n");
    sb.append("    examples: ").append(toIndentedString(examples)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inflections: ").append(toIndentedString(inflections)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pronunciations: ").append(toIndentedString(pronunciations)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    registers: ").append(toIndentedString(registers)).append("\n");
    sb.append("    semanticClasses: ").append(toIndentedString(semanticClasses)).append("\n");
    sb.append("    shortDefinitions: ").append(toIndentedString(shortDefinitions)).append("\n");
    sb.append("    subsenses: ").append(toIndentedString(subsenses)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    thesaurusLinks: ").append(toIndentedString(thesaurusLinks)).append("\n");
    sb.append("    translations: ").append(toIndentedString(translations)).append("\n");
    sb.append("    variantForms: ").append(toIndentedString(variantForms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

