/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.InflectedForm;
import org.openapitools.client.model.Sense;

/**
 * Entry
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-26T13:13:15.302+09:00[Asia/Tokyo]")
public class Entry {
  public static final String SERIALIZED_NAME_CROSS_REFERENCE_MARKERS = "crossReferenceMarkers";
  @SerializedName(SERIALIZED_NAME_CROSS_REFERENCE_MARKERS)
  private List<String> crossReferenceMarkers = null;

  public static final String SERIALIZED_NAME_CROSS_REFERENCES = "crossReferences";
  @SerializedName(SERIALIZED_NAME_CROSS_REFERENCES)
  private List<Object> crossReferences = null;

  public static final String SERIALIZED_NAME_ETYMOLOGIES = "etymologies";
  @SerializedName(SERIALIZED_NAME_ETYMOLOGIES)
  private List<String> etymologies = null;

  public static final String SERIALIZED_NAME_GRAMMATICAL_FEATURES = "grammaticalFeatures";
  @SerializedName(SERIALIZED_NAME_GRAMMATICAL_FEATURES)
  private List<Object> grammaticalFeatures = null;

  public static final String SERIALIZED_NAME_HOMOGRAPH_NUMBER = "homographNumber";
  @SerializedName(SERIALIZED_NAME_HOMOGRAPH_NUMBER)
  private String homographNumber;

  public static final String SERIALIZED_NAME_INFLECTIONS = "inflections";
  @SerializedName(SERIALIZED_NAME_INFLECTIONS)
  private List<InflectedForm> inflections = null;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<Object> notes = null;

  public static final String SERIALIZED_NAME_PRONUNCIATIONS = "pronunciations";
  @SerializedName(SERIALIZED_NAME_PRONUNCIATIONS)
  private List<Object> pronunciations = null;

  public static final String SERIALIZED_NAME_SENSES = "senses";
  @SerializedName(SERIALIZED_NAME_SENSES)
  private List<Sense> senses = null;

  public static final String SERIALIZED_NAME_VARIANT_FORMS = "variantForms";
  @SerializedName(SERIALIZED_NAME_VARIANT_FORMS)
  private List<Object> variantForms = null;

  public Entry() { 
  }

  public Entry crossReferenceMarkers(List<String> crossReferenceMarkers) {
    
    this.crossReferenceMarkers = crossReferenceMarkers;
    return this;
  }

  public Entry addCrossReferenceMarkersItem(String crossReferenceMarkersItem) {
    if (this.crossReferenceMarkers == null) {
      this.crossReferenceMarkers = new ArrayList<String>();
    }
    this.crossReferenceMarkers.add(crossReferenceMarkersItem);
    return this;
  }

   /**
   * Get crossReferenceMarkers
   * @return crossReferenceMarkers
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getCrossReferenceMarkers() {
    return crossReferenceMarkers;
  }


  public void setCrossReferenceMarkers(List<String> crossReferenceMarkers) {
    this.crossReferenceMarkers = crossReferenceMarkers;
  }


  public Entry crossReferences(List<Object> crossReferences) {
    
    this.crossReferences = crossReferences;
    return this;
  }

  public Entry addCrossReferencesItem(Object crossReferencesItem) {
    if (this.crossReferences == null) {
      this.crossReferences = new ArrayList<Object>();
    }
    this.crossReferences.add(crossReferencesItem);
    return this;
  }

   /**
   * A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.
   * @return crossReferences
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A reference to another word that is closely related, might provide additional information about the subject, has a variant spelling or is an abbreviated form of it.")

  public List<Object> getCrossReferences() {
    return crossReferences;
  }


  public void setCrossReferences(List<Object> crossReferences) {
    this.crossReferences = crossReferences;
  }


  public Entry etymologies(List<String> etymologies) {
    
    this.etymologies = etymologies;
    return this;
  }

  public Entry addEtymologiesItem(String etymologiesItem) {
    if (this.etymologies == null) {
      this.etymologies = new ArrayList<String>();
    }
    this.etymologies.add(etymologiesItem);
    return this;
  }

   /**
   * Get etymologies
   * @return etymologies
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getEtymologies() {
    return etymologies;
  }


  public void setEtymologies(List<String> etymologies) {
    this.etymologies = etymologies;
  }


  public Entry grammaticalFeatures(List<Object> grammaticalFeatures) {
    
    this.grammaticalFeatures = grammaticalFeatures;
    return this;
  }

  public Entry addGrammaticalFeaturesItem(Object grammaticalFeaturesItem) {
    if (this.grammaticalFeatures == null) {
      this.grammaticalFeatures = new ArrayList<Object>();
    }
    this.grammaticalFeatures.add(grammaticalFeaturesItem);
    return this;
  }

   /**
   * The different forms are correlated with meanings or functions which we text as &#39;features&#39;
   * @return grammaticalFeatures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The different forms are correlated with meanings or functions which we text as 'features'")

  public List<Object> getGrammaticalFeatures() {
    return grammaticalFeatures;
  }


  public void setGrammaticalFeatures(List<Object> grammaticalFeatures) {
    this.grammaticalFeatures = grammaticalFeatures;
  }


  public Entry homographNumber(String homographNumber) {
    
    this.homographNumber = homographNumber;
    return this;
  }

   /**
   * Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.
   * @return homographNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.")

  public String getHomographNumber() {
    return homographNumber;
  }


  public void setHomographNumber(String homographNumber) {
    this.homographNumber = homographNumber;
  }


  public Entry inflections(List<InflectedForm> inflections) {
    
    this.inflections = inflections;
    return this;
  }

  public Entry addInflectionsItem(InflectedForm inflectionsItem) {
    if (this.inflections == null) {
      this.inflections = new ArrayList<InflectedForm>();
    }
    this.inflections.add(inflectionsItem);
    return this;
  }

   /**
   * A list of inflected forms for an Entry.
   * @return inflections
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of inflected forms for an Entry.")

  public List<InflectedForm> getInflections() {
    return inflections;
  }


  public void setInflections(List<InflectedForm> inflections) {
    this.inflections = inflections;
  }


  public Entry notes(List<Object> notes) {
    
    this.notes = notes;
    return this;
  }

  public Entry addNotesItem(Object notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<Object>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * various types of notes that appear
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "various types of notes that appear")

  public List<Object> getNotes() {
    return notes;
  }


  public void setNotes(List<Object> notes) {
    this.notes = notes;
  }


  public Entry pronunciations(List<Object> pronunciations) {
    
    this.pronunciations = pronunciations;
    return this;
  }

  public Entry addPronunciationsItem(Object pronunciationsItem) {
    if (this.pronunciations == null) {
      this.pronunciations = new ArrayList<Object>();
    }
    this.pronunciations.add(pronunciationsItem);
    return this;
  }

   /**
   * A list of possible pronunciations of a word
   * @return pronunciations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of possible pronunciations of a word")

  public List<Object> getPronunciations() {
    return pronunciations;
  }


  public void setPronunciations(List<Object> pronunciations) {
    this.pronunciations = pronunciations;
  }


  public Entry senses(List<Sense> senses) {
    
    this.senses = senses;
    return this;
  }

  public Entry addSensesItem(Sense sensesItem) {
    if (this.senses == null) {
      this.senses = new ArrayList<Sense>();
    }
    this.senses.add(sensesItem);
    return this;
  }

   /**
   * Complete list of senses
   * @return senses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Complete list of senses")

  public List<Sense> getSenses() {
    return senses;
  }


  public void setSenses(List<Sense> senses) {
    this.senses = senses;
  }


  public Entry variantForms(List<Object> variantForms) {
    
    this.variantForms = variantForms;
    return this;
  }

  public Entry addVariantFormsItem(Object variantFormsItem) {
    if (this.variantForms == null) {
      this.variantForms = new ArrayList<Object>();
    }
    this.variantForms.add(variantFormsItem);
    return this;
  }

   /**
   * Various words that are used interchangeably depending on the context, e.g &#39;aluminium&#39; and &#39;aluminum&#39;
   * @return variantForms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'")

  public List<Object> getVariantForms() {
    return variantForms;
  }


  public void setVariantForms(List<Object> variantForms) {
    this.variantForms = variantForms;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Entry entry = (Entry) o;
    return Objects.equals(this.crossReferenceMarkers, entry.crossReferenceMarkers) &&
        Objects.equals(this.crossReferences, entry.crossReferences) &&
        Objects.equals(this.etymologies, entry.etymologies) &&
        Objects.equals(this.grammaticalFeatures, entry.grammaticalFeatures) &&
        Objects.equals(this.homographNumber, entry.homographNumber) &&
        Objects.equals(this.inflections, entry.inflections) &&
        Objects.equals(this.notes, entry.notes) &&
        Objects.equals(this.pronunciations, entry.pronunciations) &&
        Objects.equals(this.senses, entry.senses) &&
        Objects.equals(this.variantForms, entry.variantForms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(crossReferenceMarkers, crossReferences, etymologies, grammaticalFeatures, homographNumber, inflections, notes, pronunciations, senses, variantForms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Entry {\n");
    sb.append("    crossReferenceMarkers: ").append(toIndentedString(crossReferenceMarkers)).append("\n");
    sb.append("    crossReferences: ").append(toIndentedString(crossReferences)).append("\n");
    sb.append("    etymologies: ").append(toIndentedString(etymologies)).append("\n");
    sb.append("    grammaticalFeatures: ").append(toIndentedString(grammaticalFeatures)).append("\n");
    sb.append("    homographNumber: ").append(toIndentedString(homographNumber)).append("\n");
    sb.append("    inflections: ").append(toIndentedString(inflections)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    pronunciations: ").append(toIndentedString(pronunciations)).append("\n");
    sb.append("    senses: ").append(toIndentedString(senses)).append("\n");
    sb.append("    variantForms: ").append(toIndentedString(variantForms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

