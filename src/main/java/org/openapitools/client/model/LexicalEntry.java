/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.client.model.Entry;
import org.openapitools.client.model.LexicalCategory;

/**
 * Description of an entry for a particular part of speech
 */
@ApiModel(description = "Description of an entry for a particular part of speech")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-26T13:13:15.302+09:00[Asia/Tokyo]")
public class LexicalEntry {
  public static final String SERIALIZED_NAME_COMPOUNDS = "compounds";
  @SerializedName(SERIALIZED_NAME_COMPOUNDS)
  private List<Object> compounds = null;

  public static final String SERIALIZED_NAME_DERIVATIVE_OF = "derivativeOf";
  @SerializedName(SERIALIZED_NAME_DERIVATIVE_OF)
  private List<Object> derivativeOf = null;

  public static final String SERIALIZED_NAME_DERIVATIVES = "derivatives";
  @SerializedName(SERIALIZED_NAME_DERIVATIVES)
  private List<Object> derivatives = null;

  public static final String SERIALIZED_NAME_ENTRIES = "entries";
  @SerializedName(SERIALIZED_NAME_ENTRIES)
  private List<Entry> entries = null;

  public static final String SERIALIZED_NAME_GRAMMATICAL_FEATURES = "grammaticalFeatures";
  @SerializedName(SERIALIZED_NAME_GRAMMATICAL_FEATURES)
  private List<Object> grammaticalFeatures = null;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LEXICAL_CATEGORY = "lexicalCategory";
  @SerializedName(SERIALIZED_NAME_LEXICAL_CATEGORY)
  private LexicalCategory lexicalCategory;

  public static final String SERIALIZED_NAME_NOTES = "notes";
  @SerializedName(SERIALIZED_NAME_NOTES)
  private List<Object> notes = null;

  public static final String SERIALIZED_NAME_PHRASAL_VERBS = "phrasalVerbs";
  @SerializedName(SERIALIZED_NAME_PHRASAL_VERBS)
  private List<Object> phrasalVerbs = null;

  public static final String SERIALIZED_NAME_PHRASES = "phrases";
  @SerializedName(SERIALIZED_NAME_PHRASES)
  private List<Object> phrases = null;

  public static final String SERIALIZED_NAME_PRONUNCIATIONS = "pronunciations";
  @SerializedName(SERIALIZED_NAME_PRONUNCIATIONS)
  private List<Object> pronunciations = null;

  public static final String SERIALIZED_NAME_ROOT = "root";
  @SerializedName(SERIALIZED_NAME_ROOT)
  private String root;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_VARIANT_FORMS = "variantForms";
  @SerializedName(SERIALIZED_NAME_VARIANT_FORMS)
  private List<Object> variantForms = null;

  public LexicalEntry() { 
  }

  public LexicalEntry compounds(List<Object> compounds) {
    
    this.compounds = compounds;
    return this;
  }

  public LexicalEntry addCompoundsItem(Object compoundsItem) {
    if (this.compounds == null) {
      this.compounds = new ArrayList<Object>();
    }
    this.compounds.add(compoundsItem);
    return this;
  }

   /**
   * A list of written or spoken words
   * @return compounds
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken words")

  public List<Object> getCompounds() {
    return compounds;
  }


  public void setCompounds(List<Object> compounds) {
    this.compounds = compounds;
  }


  public LexicalEntry derivativeOf(List<Object> derivativeOf) {
    
    this.derivativeOf = derivativeOf;
    return this;
  }

  public LexicalEntry addDerivativeOfItem(Object derivativeOfItem) {
    if (this.derivativeOf == null) {
      this.derivativeOf = new ArrayList<Object>();
    }
    this.derivativeOf.add(derivativeOfItem);
    return this;
  }

   /**
   * A list of written or spoken words
   * @return derivativeOf
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken words")

  public List<Object> getDerivativeOf() {
    return derivativeOf;
  }


  public void setDerivativeOf(List<Object> derivativeOf) {
    this.derivativeOf = derivativeOf;
  }


  public LexicalEntry derivatives(List<Object> derivatives) {
    
    this.derivatives = derivatives;
    return this;
  }

  public LexicalEntry addDerivativesItem(Object derivativesItem) {
    if (this.derivatives == null) {
      this.derivatives = new ArrayList<Object>();
    }
    this.derivatives.add(derivativesItem);
    return this;
  }

   /**
   * A list of written or spoken words
   * @return derivatives
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken words")

  public List<Object> getDerivatives() {
    return derivatives;
  }


  public void setDerivatives(List<Object> derivatives) {
    this.derivatives = derivatives;
  }


  public LexicalEntry entries(List<Entry> entries) {
    
    this.entries = entries;
    return this;
  }

  public LexicalEntry addEntriesItem(Entry entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<Entry>();
    }
    this.entries.add(entriesItem);
    return this;
  }

   /**
   * Get entries
   * @return entries
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Entry> getEntries() {
    return entries;
  }


  public void setEntries(List<Entry> entries) {
    this.entries = entries;
  }


  public LexicalEntry grammaticalFeatures(List<Object> grammaticalFeatures) {
    
    this.grammaticalFeatures = grammaticalFeatures;
    return this;
  }

  public LexicalEntry addGrammaticalFeaturesItem(Object grammaticalFeaturesItem) {
    if (this.grammaticalFeatures == null) {
      this.grammaticalFeatures = new ArrayList<Object>();
    }
    this.grammaticalFeatures.add(grammaticalFeaturesItem);
    return this;
  }

   /**
   * The different forms are correlated with meanings or functions which we text as &#39;features&#39;
   * @return grammaticalFeatures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The different forms are correlated with meanings or functions which we text as 'features'")

  public List<Object> getGrammaticalFeatures() {
    return grammaticalFeatures;
  }


  public void setGrammaticalFeatures(List<Object> grammaticalFeatures) {
    this.grammaticalFeatures = grammaticalFeatures;
  }


  public LexicalEntry language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * IANA language code
   * @return language
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "IANA language code")

  public String getLanguage() {
    return language;
  }


  public void setLanguage(String language) {
    this.language = language;
  }


  public LexicalEntry lexicalCategory(LexicalCategory lexicalCategory) {
    
    this.lexicalCategory = lexicalCategory;
    return this;
  }

   /**
   * Get lexicalCategory
   * @return lexicalCategory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public LexicalCategory getLexicalCategory() {
    return lexicalCategory;
  }


  public void setLexicalCategory(LexicalCategory lexicalCategory) {
    this.lexicalCategory = lexicalCategory;
  }


  public LexicalEntry notes(List<Object> notes) {
    
    this.notes = notes;
    return this;
  }

  public LexicalEntry addNotesItem(Object notesItem) {
    if (this.notes == null) {
      this.notes = new ArrayList<Object>();
    }
    this.notes.add(notesItem);
    return this;
  }

   /**
   * various types of notes that appear
   * @return notes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "various types of notes that appear")

  public List<Object> getNotes() {
    return notes;
  }


  public void setNotes(List<Object> notes) {
    this.notes = notes;
  }


  public LexicalEntry phrasalVerbs(List<Object> phrasalVerbs) {
    
    this.phrasalVerbs = phrasalVerbs;
    return this;
  }

  public LexicalEntry addPhrasalVerbsItem(Object phrasalVerbsItem) {
    if (this.phrasalVerbs == null) {
      this.phrasalVerbs = new ArrayList<Object>();
    }
    this.phrasalVerbs.add(phrasalVerbsItem);
    return this;
  }

   /**
   * A list of written or spoken words
   * @return phrasalVerbs
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken words")

  public List<Object> getPhrasalVerbs() {
    return phrasalVerbs;
  }


  public void setPhrasalVerbs(List<Object> phrasalVerbs) {
    this.phrasalVerbs = phrasalVerbs;
  }


  public LexicalEntry phrases(List<Object> phrases) {
    
    this.phrases = phrases;
    return this;
  }

  public LexicalEntry addPhrasesItem(Object phrasesItem) {
    if (this.phrases == null) {
      this.phrases = new ArrayList<Object>();
    }
    this.phrases.add(phrasesItem);
    return this;
  }

   /**
   * A list of written or spoken words
   * @return phrases
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of written or spoken words")

  public List<Object> getPhrases() {
    return phrases;
  }


  public void setPhrases(List<Object> phrases) {
    this.phrases = phrases;
  }


  public LexicalEntry pronunciations(List<Object> pronunciations) {
    
    this.pronunciations = pronunciations;
    return this;
  }

  public LexicalEntry addPronunciationsItem(Object pronunciationsItem) {
    if (this.pronunciations == null) {
      this.pronunciations = new ArrayList<Object>();
    }
    this.pronunciations.add(pronunciationsItem);
    return this;
  }

   /**
   * A list of possible pronunciations of a word
   * @return pronunciations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of possible pronunciations of a word")

  public List<Object> getPronunciations() {
    return pronunciations;
  }


  public void setPronunciations(List<Object> pronunciations) {
    this.pronunciations = pronunciations;
  }


  public LexicalEntry root(String root) {
    
    this.root = root;
    return this;
  }

   /**
   * Abstract root form from which this lexicalEntry is derived.
   * @return root
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Abstract root form from which this lexicalEntry is derived.")

  public String getRoot() {
    return root;
  }


  public void setRoot(String root) {
    this.root = root;
  }


  public LexicalEntry text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * A given written or spoken realisation of an entry.
   * @return text
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A given written or spoken realisation of an entry.")

  public String getText() {
    return text;
  }


  public void setText(String text) {
    this.text = text;
  }


  public LexicalEntry variantForms(List<Object> variantForms) {
    
    this.variantForms = variantForms;
    return this;
  }

  public LexicalEntry addVariantFormsItem(Object variantFormsItem) {
    if (this.variantForms == null) {
      this.variantForms = new ArrayList<Object>();
    }
    this.variantForms.add(variantFormsItem);
    return this;
  }

   /**
   * Various words that are used interchangeably depending on the context, e.g &#39;aluminium&#39; and &#39;aluminum&#39;
   * @return variantForms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'")

  public List<Object> getVariantForms() {
    return variantForms;
  }


  public void setVariantForms(List<Object> variantForms) {
    this.variantForms = variantForms;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LexicalEntry lexicalEntry = (LexicalEntry) o;
    return Objects.equals(this.compounds, lexicalEntry.compounds) &&
        Objects.equals(this.derivativeOf, lexicalEntry.derivativeOf) &&
        Objects.equals(this.derivatives, lexicalEntry.derivatives) &&
        Objects.equals(this.entries, lexicalEntry.entries) &&
        Objects.equals(this.grammaticalFeatures, lexicalEntry.grammaticalFeatures) &&
        Objects.equals(this.language, lexicalEntry.language) &&
        Objects.equals(this.lexicalCategory, lexicalEntry.lexicalCategory) &&
        Objects.equals(this.notes, lexicalEntry.notes) &&
        Objects.equals(this.phrasalVerbs, lexicalEntry.phrasalVerbs) &&
        Objects.equals(this.phrases, lexicalEntry.phrases) &&
        Objects.equals(this.pronunciations, lexicalEntry.pronunciations) &&
        Objects.equals(this.root, lexicalEntry.root) &&
        Objects.equals(this.text, lexicalEntry.text) &&
        Objects.equals(this.variantForms, lexicalEntry.variantForms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(compounds, derivativeOf, derivatives, entries, grammaticalFeatures, language, lexicalCategory, notes, phrasalVerbs, phrases, pronunciations, root, text, variantForms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LexicalEntry {\n");
    sb.append("    compounds: ").append(toIndentedString(compounds)).append("\n");
    sb.append("    derivativeOf: ").append(toIndentedString(derivativeOf)).append("\n");
    sb.append("    derivatives: ").append(toIndentedString(derivatives)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    grammaticalFeatures: ").append(toIndentedString(grammaticalFeatures)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lexicalCategory: ").append(toIndentedString(lexicalCategory)).append("\n");
    sb.append("    notes: ").append(toIndentedString(notes)).append("\n");
    sb.append("    phrasalVerbs: ").append(toIndentedString(phrasalVerbs)).append("\n");
    sb.append("    phrases: ").append(toIndentedString(phrases)).append("\n");
    sb.append("    pronunciations: ").append(toIndentedString(pronunciations)).append("\n");
    sb.append("    root: ").append(toIndentedString(root)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    variantForms: ").append(toIndentedString(variantForms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

