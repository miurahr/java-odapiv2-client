/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import org.openapitools.client.ApiException;
import org.openapitools.client.ApiClient;
import org.openapitools.client.Configuration;
import org.openapitools.client.model.*;
import org.openapitools.client.Pair;

import org.openapitools.client.model.ErrorSchema;
import org.openapitools.client.model.Filters;
import org.openapitools.client.model.Languages;
import org.openapitools.client.model.UtilityLabels;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-27T11:23:50.379+09:00[Asia/Tokyo]")
public class UtilityApi {
  private ApiClient apiClient;

  public UtilityApi() {
    this(Configuration.getDefaultApiClient());
  }

  public UtilityApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Lists available domains in a bilingual dataset
   * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
   * @param sourceLangDomains Language code of the source language in a bilingual dataset. (required)
   * @param targetLangDomains Language code of the target language in a bilingual dataset. (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return UtilityLabels
   * @throws ApiException if fails to make API call
   */
  public UtilityLabels domainsSourceLangDomainsTargetLangDomainsGet(String sourceLangDomains, String targetLangDomains, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceLangDomains' is set
    if (sourceLangDomains == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceLangDomains' when calling domainsSourceLangDomainsTargetLangDomainsGet");
    }
    
    // verify the required parameter 'targetLangDomains' is set
    if (targetLangDomains == null) {
      throw new ApiException(400, "Missing the required parameter 'targetLangDomains' when calling domainsSourceLangDomainsTargetLangDomainsGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling domainsSourceLangDomainsTargetLangDomainsGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling domainsSourceLangDomainsTargetLangDomainsGet");
    }
    
    // create path and map variables
    String localVarPath = "/domains/{source_lang_domains}/{target_lang_domains}"
      .replaceAll("\\{" + "source_lang_domains" + "\\}", apiClient.escapeString(sourceLangDomains.toString()))
      .replaceAll("\\{" + "target_lang_domains" + "\\}", apiClient.escapeString(targetLangDomains.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UtilityLabels> localVarReturnType = new TypeReference<UtilityLabels>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available domains in a monolingual dataset
   * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
   * @param sourceLang Language code of the source language in a monolingual dataset. (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return UtilityLabels
   * @throws ApiException if fails to make API call
   */
  public UtilityLabels domainsSourceLangGet(String sourceLang, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceLang' is set
    if (sourceLang == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceLang' when calling domainsSourceLangGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling domainsSourceLangGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling domainsSourceLangGet");
    }
    
    // create path and map variables
    String localVarPath = "/domains/{source_lang}"
      .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UtilityLabels> localVarReturnType = new TypeReference<UtilityLabels>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available fields for specific endpoint
   * Returns the lists of fields available to construct API requests for a given endpoint. 
   * @param endpoint Name of the endpoint (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return Filters
   * @throws ApiException if fails to make API call
   */
  public Filters fieldsEndpointGet(String endpoint, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'endpoint' is set
    if (endpoint == null) {
      throw new ApiException(400, "Missing the required parameter 'endpoint' when calling fieldsEndpointGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling fieldsEndpointGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling fieldsEndpointGet");
    }
    
    // create path and map variables
    String localVarPath = "/fields/{endpoint}"
      .replaceAll("\\{" + "endpoint" + "\\}", apiClient.escapeString(endpoint.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Filters> localVarReturnType = new TypeReference<Filters>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available fields
   * Returns a list of the available fields to construct API requests. 
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return Filters
   * @throws ApiException if fails to make API call
   */
  public Filters fieldsGet(String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling fieldsGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling fieldsGet");
    }
    
    // create path and map variables
    String localVarPath = "/fields";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Filters> localVarReturnType = new TypeReference<Filters>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available filters for specific endpoint
   * Returns a list of all the valid filters by endpoint to construct API requests. 
   * @param endpoint Name of the endpoint. (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return Filters
   * @throws ApiException if fails to make API call
   */
  public Filters filtersEndpointGet(String endpoint, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'endpoint' is set
    if (endpoint == null) {
      throw new ApiException(400, "Missing the required parameter 'endpoint' when calling filtersEndpointGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling filtersEndpointGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling filtersEndpointGet");
    }
    
    // create path and map variables
    String localVarPath = "/filters/{endpoint}"
      .replaceAll("\\{" + "endpoint" + "\\}", apiClient.escapeString(endpoint.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Filters> localVarReturnType = new TypeReference<Filters>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available filters
   * Returns a list of all the valid filters to construct API requests. 
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return Filters
   * @throws ApiException if fails to make API call
   */
  public Filters filtersGet(String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling filtersGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling filtersGet");
    }
    
    // create path and map variables
    String localVarPath = "/filters";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Filters> localVarReturnType = new TypeReference<Filters>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available grammatical features in a monolingual dataset
   * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given monolingual dataset. 
   * @param sourceLang Language code of the source language in a monolingual dataset. (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return UtilityLabels
   * @throws ApiException if fails to make API call
   */
  public UtilityLabels grammaticalFeaturesSourceLangGet(String sourceLang, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceLang' is set
    if (sourceLang == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceLang' when calling grammaticalFeaturesSourceLangGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling grammaticalFeaturesSourceLangGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling grammaticalFeaturesSourceLangGet");
    }
    
    // create path and map variables
    String localVarPath = "/grammaticalFeatures/{source_lang}"
      .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UtilityLabels> localVarReturnType = new TypeReference<UtilityLabels>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available grammatical features in a bilingual dataset
   * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given bilingual dataset. 
   * @param sourceLangGrammatical Language code of the source language in a bilingual dataset. (required)
   * @param targetLangGrammatical Language code of the target language in a bilingual dataset. (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return UtilityLabels
   * @throws ApiException if fails to make API call
   */
  public UtilityLabels grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet(String sourceLangGrammatical, String targetLangGrammatical, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceLangGrammatical' is set
    if (sourceLangGrammatical == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceLangGrammatical' when calling grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet");
    }
    
    // verify the required parameter 'targetLangGrammatical' is set
    if (targetLangGrammatical == null) {
      throw new ApiException(400, "Missing the required parameter 'targetLangGrammatical' when calling grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet");
    }
    
    // create path and map variables
    String localVarPath = "/grammaticalFeatures/{source_lang_grammatical}/{target_lang_grammatical}"
      .replaceAll("\\{" + "source_lang_grammatical" + "\\}", apiClient.escapeString(sourceLangGrammatical.toString()))
      .replaceAll("\\{" + "target_lang_grammatical" + "\\}", apiClient.escapeString(targetLangGrammatical.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UtilityLabels> localVarReturnType = new TypeReference<UtilityLabels>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Returns the names of Dictionaries in the API
   * Returns the names of monolingual and bilingual language datasets available in the API 
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @param sourceLanguage Source Language. If provided, output will be filtered by sourceLanguage. (optional)
   * @param targetLanguage Target Language. If provided, output will be filtered by targetLanguage. (optional)
   * @return Languages
   * @throws ApiException if fails to make API call
   */
  public Languages languagesGet(String appId, String appKey, String sourceLanguage, String targetLanguage) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling languagesGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling languagesGet");
    }
    
    // create path and map variables
    String localVarPath = "/languages";

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("sourceLanguage", sourceLanguage));
    localVarQueryParams.addAll(apiClient.parameterToPair("targetLanguage", targetLanguage));

    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Languages> localVarReturnType = new TypeReference<Languages>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available lexical categories in a monolingual dataset
   * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
   * @param sourceLang Language code of the source language in a monolingual dataset. (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return UtilityLabels
   * @throws ApiException if fails to make API call
   */
  public UtilityLabels lexicalCategoriesSourceLangGet(String sourceLang, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceLang' is set
    if (sourceLang == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceLang' when calling lexicalCategoriesSourceLangGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling lexicalCategoriesSourceLangGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling lexicalCategoriesSourceLangGet");
    }
    
    // create path and map variables
    String localVarPath = "/lexicalCategories/{source_lang}"
      .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UtilityLabels> localVarReturnType = new TypeReference<UtilityLabels>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available lexical categories in a bilingual dataset
   * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given bilingual dataset. 
   * @param sourceLangLexical Language code of the source language in a bilingual dataset. (required)
   * @param targetLangLexical Language code of the target language in a bilingual dataset. (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return UtilityLabels
   * @throws ApiException if fails to make API call
   */
  public UtilityLabels lexicalCategoriesSourceLangLexicalTargetLangLexicalGet(String sourceLangLexical, String targetLangLexical, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceLangLexical' is set
    if (sourceLangLexical == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceLangLexical' when calling lexicalCategoriesSourceLangLexicalTargetLangLexicalGet");
    }
    
    // verify the required parameter 'targetLangLexical' is set
    if (targetLangLexical == null) {
      throw new ApiException(400, "Missing the required parameter 'targetLangLexical' when calling lexicalCategoriesSourceLangLexicalTargetLangLexicalGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling lexicalCategoriesSourceLangLexicalTargetLangLexicalGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling lexicalCategoriesSourceLangLexicalTargetLangLexicalGet");
    }
    
    // create path and map variables
    String localVarPath = "/lexicalCategories/{source_lang_lexical}/{target_lang_lexical}"
      .replaceAll("\\{" + "source_lang_lexical" + "\\}", apiClient.escapeString(sourceLangLexical.toString()))
      .replaceAll("\\{" + "target_lang_lexical" + "\\}", apiClient.escapeString(targetLangLexical.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UtilityLabels> localVarReturnType = new TypeReference<UtilityLabels>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available registers in a  monolingual dataset
   * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
   * @param sourceLang Language code of the source language in a monolingual dataset. (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return UtilityLabels
   * @throws ApiException if fails to make API call
   */
  public UtilityLabels registersSourceLangGet(String sourceLang, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceLang' is set
    if (sourceLang == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceLang' when calling registersSourceLangGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling registersSourceLangGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling registersSourceLangGet");
    }
    
    // create path and map variables
    String localVarPath = "/registers/{source_lang}"
      .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UtilityLabels> localVarReturnType = new TypeReference<UtilityLabels>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
  /**
   * Lists available registers in a bilingual dataset
   * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
   * @param sourceLangRegisters Language code of the source language in a bilingual dataset. (required)
   * @param targetLangRegisters Language code of the target language in a bilingual dataset. (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @return UtilityLabels
   * @throws ApiException if fails to make API call
   */
  public UtilityLabels registersSourceLangRegistersTargetLangRegistersGet(String sourceLangRegisters, String targetLangRegisters, String appId, String appKey) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceLangRegisters' is set
    if (sourceLangRegisters == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceLangRegisters' when calling registersSourceLangRegistersTargetLangRegistersGet");
    }
    
    // verify the required parameter 'targetLangRegisters' is set
    if (targetLangRegisters == null) {
      throw new ApiException(400, "Missing the required parameter 'targetLangRegisters' when calling registersSourceLangRegistersTargetLangRegistersGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling registersSourceLangRegistersTargetLangRegistersGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling registersSourceLangRegistersTargetLangRegistersGet");
    }
    
    // create path and map variables
    String localVarPath = "/registers/{source_lang_registers}/{target_lang_registers}"
      .replaceAll("\\{" + "source_lang_registers" + "\\}", apiClient.escapeString(sourceLangRegisters.toString()))
      .replaceAll("\\{" + "target_lang_registers" + "\\}", apiClient.escapeString(targetLangRegisters.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();


    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UtilityLabels> localVarReturnType = new TypeReference<UtilityLabels>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
