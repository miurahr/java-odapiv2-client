/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorSchema;
import org.openapitools.client.model.Filters;
import org.openapitools.client.model.Languages;
import org.openapitools.client.model.UtilityLabels;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UtilityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UtilityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UtilityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for domainsSourceLangDomainsTargetLangDomainsGet
     * @param sourceLangDomains Language code of the source language in a bilingual dataset. (required)
     * @param targetLangDomains Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsSourceLangDomainsTargetLangDomainsGetCall(String sourceLangDomains, String targetLangDomains, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{source_lang_domains}/{target_lang_domains}"
            .replaceAll("\\{" + "source_lang_domains" + "\\}", localVarApiClient.escapeString(sourceLangDomains.toString()))
            .replaceAll("\\{" + "target_lang_domains" + "\\}", localVarApiClient.escapeString(targetLangDomains.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsSourceLangDomainsTargetLangDomainsGetValidateBeforeCall(String sourceLangDomains, String targetLangDomains, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLangDomains' is set
        if (sourceLangDomains == null) {
            throw new ApiException("Missing the required parameter 'sourceLangDomains' when calling domainsSourceLangDomainsTargetLangDomainsGet(Async)");
        }
        
        // verify the required parameter 'targetLangDomains' is set
        if (targetLangDomains == null) {
            throw new ApiException("Missing the required parameter 'targetLangDomains' when calling domainsSourceLangDomainsTargetLangDomainsGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling domainsSourceLangDomainsTargetLangDomainsGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling domainsSourceLangDomainsTargetLangDomainsGet(Async)");
        }
        

        okhttp3.Call localVarCall = domainsSourceLangDomainsTargetLangDomainsGetCall(sourceLangDomains, targetLangDomains, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available domains in a bilingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
     * @param sourceLangDomains Language code of the source language in a bilingual dataset. (required)
     * @param targetLangDomains Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public UtilityLabels domainsSourceLangDomainsTargetLangDomainsGet(String sourceLangDomains, String targetLangDomains, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> localVarResp = domainsSourceLangDomainsTargetLangDomainsGetWithHttpInfo(sourceLangDomains, targetLangDomains, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available domains in a bilingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
     * @param sourceLangDomains Language code of the source language in a bilingual dataset. (required)
     * @param targetLangDomains Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UtilityLabels> domainsSourceLangDomainsTargetLangDomainsGetWithHttpInfo(String sourceLangDomains, String targetLangDomains, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = domainsSourceLangDomainsTargetLangDomainsGetValidateBeforeCall(sourceLangDomains, targetLangDomains, appId, appKey, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available domains in a bilingual dataset (asynchronously)
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given bilingual language dataset. 
     * @param sourceLangDomains Language code of the source language in a bilingual dataset. (required)
     * @param targetLangDomains Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsSourceLangDomainsTargetLangDomainsGetAsync(String sourceLangDomains, String targetLangDomains, String appId, String appKey, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsSourceLangDomainsTargetLangDomainsGetValidateBeforeCall(sourceLangDomains, targetLangDomains, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainsSourceLangGet
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsSourceLangGetCall(String sourceLang, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{source_lang}"
            .replaceAll("\\{" + "source_lang" + "\\}", localVarApiClient.escapeString(sourceLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainsSourceLangGetValidateBeforeCall(String sourceLang, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling domainsSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling domainsSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling domainsSourceLangGet(Async)");
        }
        

        okhttp3.Call localVarCall = domainsSourceLangGetCall(sourceLang, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available domains in a monolingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public UtilityLabels domainsSourceLangGet(String sourceLang, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> localVarResp = domainsSourceLangGetWithHttpInfo(sourceLang, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available domains in a monolingual dataset
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UtilityLabels> domainsSourceLangGetWithHttpInfo(String sourceLang, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = domainsSourceLangGetValidateBeforeCall(sourceLang, appId, appKey, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available domains in a monolingual dataset (asynchronously)
     * Returns a list of the available [domains](documentation/glossary?term&#x3D;domain) for a given monolingual language dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainsSourceLangGetAsync(String sourceLang, String appId, String appKey, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainsSourceLangGetValidateBeforeCall(sourceLang, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fieldsEndpointGet
     * @param endpoint Name of the endpoint (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown endpoint.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fieldsEndpointGetCall(String endpoint, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fields/{endpoint}"
            .replaceAll("\\{" + "endpoint" + "\\}", localVarApiClient.escapeString(endpoint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fieldsEndpointGetValidateBeforeCall(String endpoint, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'endpoint' is set
        if (endpoint == null) {
            throw new ApiException("Missing the required parameter 'endpoint' when calling fieldsEndpointGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling fieldsEndpointGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling fieldsEndpointGet(Async)");
        }
        

        okhttp3.Call localVarCall = fieldsEndpointGetCall(endpoint, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available fields for specific endpoint
     * Returns the lists of fields available to construct API requests for a given endpoint. 
     * @param endpoint Name of the endpoint (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return Filters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown endpoint.  </td><td>  -  </td></tr>
     </table>
     */
    public Filters fieldsEndpointGet(String endpoint, String appId, String appKey) throws ApiException {
        ApiResponse<Filters> localVarResp = fieldsEndpointGetWithHttpInfo(endpoint, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available fields for specific endpoint
     * Returns the lists of fields available to construct API requests for a given endpoint. 
     * @param endpoint Name of the endpoint (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;Filters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown endpoint.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filters> fieldsEndpointGetWithHttpInfo(String endpoint, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = fieldsEndpointGetValidateBeforeCall(endpoint, appId, appKey, null);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available fields for specific endpoint (asynchronously)
     * Returns the lists of fields available to construct API requests for a given endpoint. 
     * @param endpoint Name of the endpoint (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown endpoint.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fieldsEndpointGetAsync(String endpoint, String appId, String appKey, final ApiCallback<Filters> _callback) throws ApiException {

        okhttp3.Call localVarCall = fieldsEndpointGetValidateBeforeCall(endpoint, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fieldsGet
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fieldsGetCall(String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/fields";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fieldsGetValidateBeforeCall(String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling fieldsGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling fieldsGet(Async)");
        }
        

        okhttp3.Call localVarCall = fieldsGetCall(appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available fields
     * Returns a list of the available fields to construct API requests. 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return Filters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
     </table>
     */
    public Filters fieldsGet(String appId, String appKey) throws ApiException {
        ApiResponse<Filters> localVarResp = fieldsGetWithHttpInfo(appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available fields
     * Returns a list of the available fields to construct API requests. 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;Filters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Filters> fieldsGetWithHttpInfo(String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = fieldsGetValidateBeforeCall(appId, appKey, null);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available fields (asynchronously)
     * Returns a list of the available fields to construct API requests. 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call fieldsGetAsync(String appId, String appKey, final ApiCallback<Filters> _callback) throws ApiException {

        okhttp3.Call localVarCall = fieldsGetValidateBeforeCall(appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filtersEndpointGet
     * @param endpoint Name of the endpoint. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown endpoint.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filtersEndpointGetCall(String endpoint, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filters/{endpoint}"
            .replaceAll("\\{" + "endpoint" + "\\}", localVarApiClient.escapeString(endpoint.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filtersEndpointGetValidateBeforeCall(String endpoint, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'endpoint' is set
        if (endpoint == null) {
            throw new ApiException("Missing the required parameter 'endpoint' when calling filtersEndpointGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling filtersEndpointGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling filtersEndpointGet(Async)");
        }
        

        okhttp3.Call localVarCall = filtersEndpointGetCall(endpoint, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available filters for specific endpoint
     * Returns a list of all the valid filters by endpoint to construct API requests. 
     * @param endpoint Name of the endpoint. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return Filters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown endpoint.  </td><td>  -  </td></tr>
     </table>
     */
    public Filters filtersEndpointGet(String endpoint, String appId, String appKey) throws ApiException {
        ApiResponse<Filters> localVarResp = filtersEndpointGetWithHttpInfo(endpoint, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available filters for specific endpoint
     * Returns a list of all the valid filters by endpoint to construct API requests. 
     * @param endpoint Name of the endpoint. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;Filters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown endpoint.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Filters> filtersEndpointGetWithHttpInfo(String endpoint, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = filtersEndpointGetValidateBeforeCall(endpoint, appId, appKey, null);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available filters for specific endpoint (asynchronously)
     * Returns a list of all the valid filters by endpoint to construct API requests. 
     * @param endpoint Name of the endpoint. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown endpoint.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call filtersEndpointGetAsync(String endpoint, String appId, String appKey, final ApiCallback<Filters> _callback) throws ApiException {

        okhttp3.Call localVarCall = filtersEndpointGetValidateBeforeCall(endpoint, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for filtersGet
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call filtersGetCall(String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call filtersGetValidateBeforeCall(String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling filtersGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling filtersGet(Async)");
        }
        

        okhttp3.Call localVarCall = filtersGetCall(appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available filters
     * Returns a list of all the valid filters to construct API requests. 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return Filters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
     </table>
     */
    public Filters filtersGet(String appId, String appKey) throws ApiException {
        ApiResponse<Filters> localVarResp = filtersGetWithHttpInfo(appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available filters
     * Returns a list of all the valid filters to construct API requests. 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;Filters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Filters> filtersGetWithHttpInfo(String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = filtersGetValidateBeforeCall(appId, appKey, null);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available filters (asynchronously)
     * Returns a list of all the valid filters to construct API requests. 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call filtersGetAsync(String appId, String appKey, final ApiCallback<Filters> _callback) throws ApiException {

        okhttp3.Call localVarCall = filtersGetValidateBeforeCall(appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<Filters>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grammaticalFeaturesSourceLangGet
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grammaticalFeaturesSourceLangGetCall(String sourceLang, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/grammaticalFeatures/{source_lang}"
            .replaceAll("\\{" + "source_lang" + "\\}", localVarApiClient.escapeString(sourceLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grammaticalFeaturesSourceLangGetValidateBeforeCall(String sourceLang, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling grammaticalFeaturesSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling grammaticalFeaturesSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling grammaticalFeaturesSourceLangGet(Async)");
        }
        

        okhttp3.Call localVarCall = grammaticalFeaturesSourceLangGetCall(sourceLang, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available grammatical features in a monolingual dataset
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given monolingual dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public UtilityLabels grammaticalFeaturesSourceLangGet(String sourceLang, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> localVarResp = grammaticalFeaturesSourceLangGetWithHttpInfo(sourceLang, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available grammatical features in a monolingual dataset
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given monolingual dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UtilityLabels> grammaticalFeaturesSourceLangGetWithHttpInfo(String sourceLang, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = grammaticalFeaturesSourceLangGetValidateBeforeCall(sourceLang, appId, appKey, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available grammatical features in a monolingual dataset (asynchronously)
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given monolingual dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grammaticalFeaturesSourceLangGetAsync(String sourceLang, String appId, String appKey, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = grammaticalFeaturesSourceLangGetValidateBeforeCall(sourceLang, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet
     * @param sourceLangGrammatical Language code of the source language in a bilingual dataset. (required)
     * @param targetLangGrammatical Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGetCall(String sourceLangGrammatical, String targetLangGrammatical, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/grammaticalFeatures/{source_lang_grammatical}/{target_lang_grammatical}"
            .replaceAll("\\{" + "source_lang_grammatical" + "\\}", localVarApiClient.escapeString(sourceLangGrammatical.toString()))
            .replaceAll("\\{" + "target_lang_grammatical" + "\\}", localVarApiClient.escapeString(targetLangGrammatical.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGetValidateBeforeCall(String sourceLangGrammatical, String targetLangGrammatical, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLangGrammatical' is set
        if (sourceLangGrammatical == null) {
            throw new ApiException("Missing the required parameter 'sourceLangGrammatical' when calling grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet(Async)");
        }
        
        // verify the required parameter 'targetLangGrammatical' is set
        if (targetLangGrammatical == null) {
            throw new ApiException("Missing the required parameter 'targetLangGrammatical' when calling grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet(Async)");
        }
        

        okhttp3.Call localVarCall = grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGetCall(sourceLangGrammatical, targetLangGrammatical, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available grammatical features in a bilingual dataset
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given bilingual dataset. 
     * @param sourceLangGrammatical Language code of the source language in a bilingual dataset. (required)
     * @param targetLangGrammatical Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public UtilityLabels grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGet(String sourceLangGrammatical, String targetLangGrammatical, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> localVarResp = grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGetWithHttpInfo(sourceLangGrammatical, targetLangGrammatical, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available grammatical features in a bilingual dataset
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given bilingual dataset. 
     * @param sourceLangGrammatical Language code of the source language in a bilingual dataset. (required)
     * @param targetLangGrammatical Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UtilityLabels> grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGetWithHttpInfo(String sourceLangGrammatical, String targetLangGrammatical, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGetValidateBeforeCall(sourceLangGrammatical, targetLangGrammatical, appId, appKey, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available grammatical features in a bilingual dataset (asynchronously)
     * Returns a list of the available [grammatical features](documentation/glossary?term&#x3D;grammaticalfeatures) for a given bilingual dataset. 
     * @param sourceLangGrammatical Language code of the source language in a bilingual dataset. (required)
     * @param targetLangGrammatical Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGetAsync(String sourceLangGrammatical, String targetLangGrammatical, String appId, String appKey, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = grammaticalFeaturesSourceLangGrammaticalTargetLangGrammaticalGetValidateBeforeCall(sourceLangGrammatical, targetLangGrammatical, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for languagesGet
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param sourceLanguage Source Language. If provided, output will be filtered by sourceLanguage. (optional)
     * @param targetLanguage Target Language. If provided, output will be filtered by targetLanguage. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetCall(String appId, String appKey, String sourceLanguage, String targetLanguage, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sourceLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceLanguage", sourceLanguage));
        }

        if (targetLanguage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetLanguage", targetLanguage));
        }

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call languagesGetValidateBeforeCall(String appId, String appKey, String sourceLanguage, String targetLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling languagesGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling languagesGet(Async)");
        }
        

        okhttp3.Call localVarCall = languagesGetCall(appId, appKey, sourceLanguage, targetLanguage, _callback);
        return localVarCall;

    }

    /**
     * Returns the names of Dictionaries in the API
     * Returns the names of monolingual and bilingual language datasets available in the API 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param sourceLanguage Source Language. If provided, output will be filtered by sourceLanguage. (optional)
     * @param targetLanguage Target Language. If provided, output will be filtered by targetLanguage. (optional)
     * @return Languages
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public Languages languagesGet(String appId, String appKey, String sourceLanguage, String targetLanguage) throws ApiException {
        ApiResponse<Languages> localVarResp = languagesGetWithHttpInfo(appId, appKey, sourceLanguage, targetLanguage);
        return localVarResp.getData();
    }

    /**
     * Returns the names of Dictionaries in the API
     * Returns the names of monolingual and bilingual language datasets available in the API 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param sourceLanguage Source Language. If provided, output will be filtered by sourceLanguage. (optional)
     * @param targetLanguage Target Language. If provided, output will be filtered by targetLanguage. (optional)
     * @return ApiResponse&lt;Languages&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Languages> languagesGetWithHttpInfo(String appId, String appKey, String sourceLanguage, String targetLanguage) throws ApiException {
        okhttp3.Call localVarCall = languagesGetValidateBeforeCall(appId, appKey, sourceLanguage, targetLanguage, null);
        Type localVarReturnType = new TypeToken<Languages>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns the names of Dictionaries in the API (asynchronously)
     * Returns the names of monolingual and bilingual language datasets available in the API 
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param sourceLanguage Source Language. If provided, output will be filtered by sourceLanguage. (optional)
     * @param targetLanguage Target Language. If provided, output will be filtered by targetLanguage. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call languagesGetAsync(String appId, String appKey, String sourceLanguage, String targetLanguage, final ApiCallback<Languages> _callback) throws ApiException {

        okhttp3.Call localVarCall = languagesGetValidateBeforeCall(appId, appKey, sourceLanguage, targetLanguage, _callback);
        Type localVarReturnType = new TypeToken<Languages>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lexicalCategoriesSourceLangGet
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lexicalCategoriesSourceLangGetCall(String sourceLang, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lexicalCategories/{source_lang}"
            .replaceAll("\\{" + "source_lang" + "\\}", localVarApiClient.escapeString(sourceLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lexicalCategoriesSourceLangGetValidateBeforeCall(String sourceLang, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling lexicalCategoriesSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling lexicalCategoriesSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling lexicalCategoriesSourceLangGet(Async)");
        }
        

        okhttp3.Call localVarCall = lexicalCategoriesSourceLangGetCall(sourceLang, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available lexical categories in a monolingual dataset
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public UtilityLabels lexicalCategoriesSourceLangGet(String sourceLang, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> localVarResp = lexicalCategoriesSourceLangGetWithHttpInfo(sourceLang, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available lexical categories in a monolingual dataset
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UtilityLabels> lexicalCategoriesSourceLangGetWithHttpInfo(String sourceLang, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = lexicalCategoriesSourceLangGetValidateBeforeCall(sourceLang, appId, appKey, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available lexical categories in a monolingual dataset (asynchronously)
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given language dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lexicalCategoriesSourceLangGetAsync(String sourceLang, String appId, String appKey, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = lexicalCategoriesSourceLangGetValidateBeforeCall(sourceLang, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lexicalCategoriesSourceLangLexicalTargetLangLexicalGet
     * @param sourceLangLexical Language code of the source language in a bilingual dataset. (required)
     * @param targetLangLexical Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lexicalCategoriesSourceLangLexicalTargetLangLexicalGetCall(String sourceLangLexical, String targetLangLexical, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/lexicalCategories/{source_lang_lexical}/{target_lang_lexical}"
            .replaceAll("\\{" + "source_lang_lexical" + "\\}", localVarApiClient.escapeString(sourceLangLexical.toString()))
            .replaceAll("\\{" + "target_lang_lexical" + "\\}", localVarApiClient.escapeString(targetLangLexical.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lexicalCategoriesSourceLangLexicalTargetLangLexicalGetValidateBeforeCall(String sourceLangLexical, String targetLangLexical, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLangLexical' is set
        if (sourceLangLexical == null) {
            throw new ApiException("Missing the required parameter 'sourceLangLexical' when calling lexicalCategoriesSourceLangLexicalTargetLangLexicalGet(Async)");
        }
        
        // verify the required parameter 'targetLangLexical' is set
        if (targetLangLexical == null) {
            throw new ApiException("Missing the required parameter 'targetLangLexical' when calling lexicalCategoriesSourceLangLexicalTargetLangLexicalGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling lexicalCategoriesSourceLangLexicalTargetLangLexicalGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling lexicalCategoriesSourceLangLexicalTargetLangLexicalGet(Async)");
        }
        

        okhttp3.Call localVarCall = lexicalCategoriesSourceLangLexicalTargetLangLexicalGetCall(sourceLangLexical, targetLangLexical, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available lexical categories in a bilingual dataset
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given bilingual dataset. 
     * @param sourceLangLexical Language code of the source language in a bilingual dataset. (required)
     * @param targetLangLexical Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public UtilityLabels lexicalCategoriesSourceLangLexicalTargetLangLexicalGet(String sourceLangLexical, String targetLangLexical, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> localVarResp = lexicalCategoriesSourceLangLexicalTargetLangLexicalGetWithHttpInfo(sourceLangLexical, targetLangLexical, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available lexical categories in a bilingual dataset
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given bilingual dataset. 
     * @param sourceLangLexical Language code of the source language in a bilingual dataset. (required)
     * @param targetLangLexical Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UtilityLabels> lexicalCategoriesSourceLangLexicalTargetLangLexicalGetWithHttpInfo(String sourceLangLexical, String targetLangLexical, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = lexicalCategoriesSourceLangLexicalTargetLangLexicalGetValidateBeforeCall(sourceLangLexical, targetLangLexical, appId, appKey, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available lexical categories in a bilingual dataset (asynchronously)
     * Returns a list of available [lexical categories](documentation/glossary?term&#x3D;lexicalcategory) for a given bilingual dataset. 
     * @param sourceLangLexical Language code of the source language in a bilingual dataset. (required)
     * @param targetLangLexical Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lexicalCategoriesSourceLangLexicalTargetLangLexicalGetAsync(String sourceLangLexical, String targetLangLexical, String appId, String appKey, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = lexicalCategoriesSourceLangLexicalTargetLangLexicalGetValidateBeforeCall(sourceLangLexical, targetLangLexical, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registersSourceLangGet
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registersSourceLangGetCall(String sourceLang, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registers/{source_lang}"
            .replaceAll("\\{" + "source_lang" + "\\}", localVarApiClient.escapeString(sourceLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registersSourceLangGetValidateBeforeCall(String sourceLang, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling registersSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling registersSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling registersSourceLangGet(Async)");
        }
        

        okhttp3.Call localVarCall = registersSourceLangGetCall(sourceLang, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available registers in a  monolingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public UtilityLabels registersSourceLangGet(String sourceLang, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> localVarResp = registersSourceLangGetWithHttpInfo(sourceLang, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available registers in a  monolingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UtilityLabels> registersSourceLangGetWithHttpInfo(String sourceLang, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = registersSourceLangGetValidateBeforeCall(sourceLang, appId, appKey, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available registers in a  monolingual dataset (asynchronously)
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given monolingual language dataset. 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registersSourceLangGetAsync(String sourceLang, String appId, String appKey, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = registersSourceLangGetValidateBeforeCall(sourceLang, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registersSourceLangRegistersTargetLangRegistersGet
     * @param sourceLangRegisters Language code of the source language in a bilingual dataset. (required)
     * @param targetLangRegisters Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registersSourceLangRegistersTargetLangRegistersGetCall(String sourceLangRegisters, String targetLangRegisters, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/registers/{source_lang_registers}/{target_lang_registers}"
            .replaceAll("\\{" + "source_lang_registers" + "\\}", localVarApiClient.escapeString(sourceLangRegisters.toString()))
            .replaceAll("\\{" + "target_lang_registers" + "\\}", localVarApiClient.escapeString(targetLangRegisters.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registersSourceLangRegistersTargetLangRegistersGetValidateBeforeCall(String sourceLangRegisters, String targetLangRegisters, String appId, String appKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLangRegisters' is set
        if (sourceLangRegisters == null) {
            throw new ApiException("Missing the required parameter 'sourceLangRegisters' when calling registersSourceLangRegistersTargetLangRegistersGet(Async)");
        }
        
        // verify the required parameter 'targetLangRegisters' is set
        if (targetLangRegisters == null) {
            throw new ApiException("Missing the required parameter 'targetLangRegisters' when calling registersSourceLangRegistersTargetLangRegistersGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling registersSourceLangRegistersTargetLangRegistersGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling registersSourceLangRegistersTargetLangRegistersGet(Async)");
        }
        

        okhttp3.Call localVarCall = registersSourceLangRegistersTargetLangRegistersGetCall(sourceLangRegisters, targetLangRegisters, appId, appKey, _callback);
        return localVarCall;

    }

    /**
     * Lists available registers in a bilingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
     * @param sourceLangRegisters Language code of the source language in a bilingual dataset. (required)
     * @param targetLangRegisters Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return UtilityLabels
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public UtilityLabels registersSourceLangRegistersTargetLangRegistersGet(String sourceLangRegisters, String targetLangRegisters, String appId, String appKey) throws ApiException {
        ApiResponse<UtilityLabels> localVarResp = registersSourceLangRegistersTargetLangRegistersGetWithHttpInfo(sourceLangRegisters, targetLangRegisters, appId, appKey);
        return localVarResp.getData();
    }

    /**
     * Lists available registers in a bilingual dataset
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
     * @param sourceLangRegisters Language code of the source language in a bilingual dataset. (required)
     * @param targetLangRegisters Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @return ApiResponse&lt;UtilityLabels&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UtilityLabels> registersSourceLangRegistersTargetLangRegistersGetWithHttpInfo(String sourceLangRegisters, String targetLangRegisters, String appId, String appKey) throws ApiException {
        okhttp3.Call localVarCall = registersSourceLangRegistersTargetLangRegistersGetValidateBeforeCall(sourceLangRegisters, targetLangRegisters, appId, appKey, null);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Lists available registers in a bilingual dataset (asynchronously)
     * Returns a list of the available [registers](documentation/glossary?term&#x3D;registers) for a given bilingual language dataset. 
     * @param sourceLangRegisters Language code of the source language in a bilingual dataset. (required)
     * @param targetLangRegisters Language code of the target language in a bilingual dataset. (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Unknown sourceLanguage and/or targetLanguage. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registersSourceLangRegistersTargetLangRegistersGetAsync(String sourceLangRegisters, String targetLangRegisters, String appId, String appKey, final ApiCallback<UtilityLabels> _callback) throws ApiException {

        okhttp3.Call localVarCall = registersSourceLangRegistersTargetLangRegistersGetValidateBeforeCall(sourceLangRegisters, targetLangRegisters, appId, appKey, _callback);
        Type localVarReturnType = new TypeToken<UtilityLabels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
