/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorSchema;
import org.openapitools.client.model.Wordlist;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchSourceLangGet
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset Pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSourceLangGetCall(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{source_lang}"
            .replaceAll("\\{" + "source_lang" + "\\}", localVarApiClient.escapeString(sourceLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSourceLangGetValidateBeforeCall(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling searchSourceLangGet(Async)");
        }
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling searchSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling searchSourceLangGet(Async)");
        }
        

        okhttp3.Call localVarCall = searchSourceLangGetCall(sourceLang, q, appId, appKey, prefix, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Retrieves possible dictionary matches to an input string
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are calculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma).    &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset Pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @return Wordlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public Wordlist searchSourceLangGet(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset) throws ApiException {
        ApiResponse<Wordlist> localVarResp = searchSourceLangGetWithHttpInfo(sourceLang, q, appId, appKey, prefix, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Retrieves possible dictionary matches to an input string
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are calculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma).    &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset Pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @return ApiResponse&lt;Wordlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wordlist> searchSourceLangGetWithHttpInfo(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchSourceLangGetValidateBeforeCall(sourceLang, q, appId, appKey, prefix, limit, offset, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves possible dictionary matches to an input string (asynchronously)
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are calculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma).    &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang Language code of the source language in a monolingual dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset Pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSourceLangGetAsync(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset, final ApiCallback<Wordlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSourceLangGetValidateBeforeCall(sourceLang, q, appId, appKey, prefix, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchThesaurusSourceLangGet
     * @param sourceLang Language code of the source language in a Thesaurus dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset Pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchThesaurusSourceLangGetCall(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/thesaurus/{source_lang}"
            .replaceAll("\\{" + "source_lang" + "\\}", localVarApiClient.escapeString(sourceLang.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchThesaurusSourceLangGetValidateBeforeCall(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLang' is set
        if (sourceLang == null) {
            throw new ApiException("Missing the required parameter 'sourceLang' when calling searchThesaurusSourceLangGet(Async)");
        }
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchThesaurusSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling searchThesaurusSourceLangGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling searchThesaurusSourceLangGet(Async)");
        }
        

        okhttp3.Call localVarCall = searchThesaurusSourceLangGetCall(sourceLang, q, appId, appKey, prefix, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Retrieves possible dictionary matches to an input string
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are calculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma).    &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang Language code of the source language in a Thesaurus dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset Pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @return Wordlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public Wordlist searchThesaurusSourceLangGet(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset) throws ApiException {
        ApiResponse<Wordlist> localVarResp = searchThesaurusSourceLangGetWithHttpInfo(sourceLang, q, appId, appKey, prefix, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Retrieves possible dictionary matches to an input string
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are calculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma).    &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang Language code of the source language in a Thesaurus dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset Pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @return ApiResponse&lt;Wordlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wordlist> searchThesaurusSourceLangGetWithHttpInfo(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchThesaurusSourceLangGetValidateBeforeCall(sourceLang, q, appId, appKey, prefix, limit, offset, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves possible dictionary matches to an input string (asynchronously)
     *  Use this to retrieve possible [headword](documentation/glossary?term&#x3D;headword) matches for a given string of text. The results are calculated using headword matching, fuzzy matching, and [lemmatization](documentation/glossary?term&#x3D;lemma).    &lt;div id&#x3D;\&quot;search\&quot;&gt;&lt;/div&gt; 
     * @param sourceLang Language code of the source language in a Thesaurus dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset Pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchThesaurusSourceLangGetAsync(String sourceLang, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset, final ApiCallback<Wordlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchThesaurusSourceLangGetValidateBeforeCall(sourceLang, q, appId, appKey, prefix, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchTranslationsSourceLangSearchTargetLangSearchGet
     * @param sourceLangSearch Language code of the source language in a bilingual dataset. (required)
     * @param targetLangSearch Language code of the target language in a bilingual dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTranslationsSourceLangSearchTargetLangSearchGetCall(String sourceLangSearch, String targetLangSearch, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/translations/{source_lang_search}/{target_lang_search}"
            .replaceAll("\\{" + "source_lang_search" + "\\}", localVarApiClient.escapeString(sourceLangSearch.toString()))
            .replaceAll("\\{" + "target_lang_search" + "\\}", localVarApiClient.escapeString(targetLangSearch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (appId != null) {
            localVarHeaderParams.put("app_id", localVarApiClient.parameterToString(appId));
        }

        if (appKey != null) {
            localVarHeaderParams.put("app_key", localVarApiClient.parameterToString(appKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchTranslationsSourceLangSearchTargetLangSearchGetValidateBeforeCall(String sourceLangSearch, String targetLangSearch, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sourceLangSearch' is set
        if (sourceLangSearch == null) {
            throw new ApiException("Missing the required parameter 'sourceLangSearch' when calling searchTranslationsSourceLangSearchTargetLangSearchGet(Async)");
        }
        
        // verify the required parameter 'targetLangSearch' is set
        if (targetLangSearch == null) {
            throw new ApiException("Missing the required parameter 'targetLangSearch' when calling searchTranslationsSourceLangSearchTargetLangSearchGet(Async)");
        }
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling searchTranslationsSourceLangSearchTargetLangSearchGet(Async)");
        }
        
        // verify the required parameter 'appId' is set
        if (appId == null) {
            throw new ApiException("Missing the required parameter 'appId' when calling searchTranslationsSourceLangSearchTargetLangSearchGet(Async)");
        }
        
        // verify the required parameter 'appKey' is set
        if (appKey == null) {
            throw new ApiException("Missing the required parameter 'appKey' when calling searchTranslationsSourceLangSearchTargetLangSearchGet(Async)");
        }
        

        okhttp3.Call localVarCall = searchTranslationsSourceLangSearchTargetLangSearchGetCall(sourceLangSearch, targetLangSearch, q, appId, appKey, prefix, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Retrieves possible headwords with translations
     *  Use this to find possible headwords with translations for a given word.  &lt;div id&#x3D;\&quot;search_translation\&quot;&gt;&lt;/div&gt; 
     * @param sourceLangSearch Language code of the source language in a bilingual dataset. (required)
     * @param targetLangSearch Language code of the target language in a bilingual dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @return Wordlist
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public Wordlist searchTranslationsSourceLangSearchTargetLangSearchGet(String sourceLangSearch, String targetLangSearch, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset) throws ApiException {
        ApiResponse<Wordlist> localVarResp = searchTranslationsSourceLangSearchTargetLangSearchGetWithHttpInfo(sourceLangSearch, targetLangSearch, q, appId, appKey, prefix, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Retrieves possible headwords with translations
     *  Use this to find possible headwords with translations for a given word.  &lt;div id&#x3D;\&quot;search_translation\&quot;&gt;&lt;/div&gt; 
     * @param sourceLangSearch Language code of the source language in a bilingual dataset. (required)
     * @param targetLangSearch Language code of the target language in a bilingual dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @return ApiResponse&lt;Wordlist&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Wordlist> searchTranslationsSourceLangSearchTargetLangSearchGetWithHttpInfo(String sourceLangSearch, String targetLangSearch, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = searchTranslationsSourceLangSearchTargetLangSearchGetValidateBeforeCall(sourceLangSearch, targetLangSearch, q, appId, appKey, prefix, limit, offset, null);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves possible headwords with translations (asynchronously)
     *  Use this to find possible headwords with translations for a given word.  &lt;div id&#x3D;\&quot;search_translation\&quot;&gt;&lt;/div&gt; 
     * @param sourceLangSearch Language code of the source language in a bilingual dataset. (required)
     * @param targetLangSearch Language code of the target language in a bilingual dataset. (required)
     * @param q Search string (required)
     * @param appId App ID Authentication Parameter (required)
     * @param appKey App Key Authentication Parameter (required)
     * @param prefix Use prefix&#x3D;true to return only results that start with the value of the \&quot;q\&quot; parameter. (optional)
     * @param limit Restricts number of returned results. Default and max. is 5000. (optional)
     * @param offset pagination - results offset.  The sum of offset and limit must not exceed 10000. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful response. The Search endpoint is able to retrieve a max of 10000 results per query. </td><td>  * X-Request-Id - A unique ID generated for the request. When reporting a problem with a specific request, include the returned X-Request-Id.  <br>  </td></tr>
        <tr><td> 400 </td><td> source_lang and target_lang can not be same; no words matching source_lang and/or translations; offset and limit exceeded 10000 together. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> No entry was found matching the selection parameters.  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal error. An error occurred during processing. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchTranslationsSourceLangSearchTargetLangSearchGetAsync(String sourceLangSearch, String targetLangSearch, String q, String appId, String appKey, Boolean prefix, Integer limit, Integer offset, final ApiCallback<Wordlist> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchTranslationsSourceLangSearchTargetLangSearchGetValidateBeforeCall(sourceLangSearch, targetLangSearch, q, appId, appKey, prefix, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<Wordlist>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
