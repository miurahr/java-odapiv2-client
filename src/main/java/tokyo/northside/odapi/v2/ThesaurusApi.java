/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package tokyo.northside.odapi.v2;

import com.fasterxml.jackson.core.type.TypeReference;

import tokyo.northside.odapi.ApiException;
import tokyo.northside.odapi.ApiClient;
import tokyo.northside.odapi.Configuration;
import org.openapitools.client.model.*;
import tokyo.northside.odapi.Pair;

import org.openapitools.client.model.ErrorSchema;
import org.openapitools.client.model.Thesaurus;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-27T11:50:35.407+09:00[Asia/Tokyo]")
public class ThesaurusApi {
  private ApiClient apiClient;

  public ThesaurusApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ThesaurusApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Retrieve words that are similar to a given word
   * Use this to retrieve words that are similar/opposite in meaning to the input word ([synonym](documentation/glossary?term&#x3D;synonym)/[antonym](documentation/glossary?term&#x3D;antonym)).  Tip: Some Entries responses contain sense-level links to a Thesaurus entry by the property \&quot;thesaurusLink\&quot;. For instance:  &#x60;&#x60;&#x60;@javascript   {     \&quot;thesaurusLinks\&quot;: [                             {                                 \&quot;entry_id\&quot;: \&quot;abide_by\&quot;,                                 \&quot;sense_id\&quot;: \&quot;t_en_gb0000029.003\&quot;                             }                         ]   }  &#x60;&#x60;&#x60; &lt;div id&#x3D;\&quot;synonyms\&quot;&gt;&lt;/div&gt; 
   * @param sourceLang Language code of the source language in a Thesaurus dataset. (required)
   * @param wordId The identifier for an Entry (case-sensitive). (required)
   * @param appId App ID Authentication Parameter (required)
   * @param appKey App Key Authentication Parameter (required)
   * @param fields A comma-separated list of data fields to return for the matched entries. What to return - if specified, either &#39;synonyms&#39;, &#39;antonyms&#39; or &#39;synonyms,antonyms&#39; It cannot be empty.  (optional
   * @param strictMatch Specifies whether diacritics must match exactly. If \&quot;false\&quot;, near-homographs for the given word_id will also be selected (e.g., *rose* matches both *rose* and *rosé*; similarly *rosé* matches both). (optional, default to false)
   * @return Thesaurus
   * @throws ApiException if fails to make API call
   */
  public Thesaurus thesaurusSourceLangWordIdGet(String sourceLang, String wordId, String appId, String appKey, List<String> fields, Boolean strictMatch) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'sourceLang' is set
    if (sourceLang == null) {
      throw new ApiException(400, "Missing the required parameter 'sourceLang' when calling thesaurusSourceLangWordIdGet");
    }
    
    // verify the required parameter 'wordId' is set
    if (wordId == null) {
      throw new ApiException(400, "Missing the required parameter 'wordId' when calling thesaurusSourceLangWordIdGet");
    }
    
    // verify the required parameter 'appId' is set
    if (appId == null) {
      throw new ApiException(400, "Missing the required parameter 'appId' when calling thesaurusSourceLangWordIdGet");
    }
    
    // verify the required parameter 'appKey' is set
    if (appKey == null) {
      throw new ApiException(400, "Missing the required parameter 'appKey' when calling thesaurusSourceLangWordIdGet");
    }
    
    // create path and map variables
    String localVarPath = "/thesaurus/{source_lang}/{word_id}"
      .replaceAll("\\{" + "source_lang" + "\\}", apiClient.escapeString(sourceLang.toString()))
      .replaceAll("\\{" + "word_id" + "\\}", apiClient.escapeString(wordId.toString()));

    // query params
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "fields", fields));
    localVarQueryParams.addAll(apiClient.parameterToPair("strictMatch", strictMatch));

    if (appId != null)
      localVarHeaderParams.put("app_id", apiClient.parameterToString(appId));
if (appKey != null)
      localVarHeaderParams.put("app_key", apiClient.parameterToString(appKey));

    
    
    final String[] localVarAccepts = {
      "*/*"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<Thesaurus> localVarReturnType = new TypeReference<Thesaurus>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "GET",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }
}
