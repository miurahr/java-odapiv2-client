/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tokyo.northside.odapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import tokyo.northside.odapi.model.ThesaurusSense;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ThesaurusEntry
 */
@JsonPropertyOrder({
  ThesaurusEntry.JSON_PROPERTY_GRAMMATICAL_FEATURES,
  ThesaurusEntry.JSON_PROPERTY_HOMOGRAPH_NUMBER,
  ThesaurusEntry.JSON_PROPERTY_SENSES,
  ThesaurusEntry.JSON_PROPERTY_VARIANT_FORMS
})
@JsonTypeName("ThesaurusEntry")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-27T22:37:51.170+09:00[Asia/Tokyo]")
public class ThesaurusEntry {
  public static final String JSON_PROPERTY_GRAMMATICAL_FEATURES = "grammaticalFeatures";
  private List<Object> grammaticalFeatures = null;

  public static final String JSON_PROPERTY_HOMOGRAPH_NUMBER = "homographNumber";
  private String homographNumber;

  public static final String JSON_PROPERTY_SENSES = "senses";
  private List<ThesaurusSense> senses = null;

  public static final String JSON_PROPERTY_VARIANT_FORMS = "variantForms";
  private List<Object> variantForms = null;

  public ThesaurusEntry() { 
  }

  public ThesaurusEntry grammaticalFeatures(List<Object> grammaticalFeatures) {
    
    this.grammaticalFeatures = grammaticalFeatures;
    return this;
  }

  public ThesaurusEntry addGrammaticalFeaturesItem(Object grammaticalFeaturesItem) {
    if (this.grammaticalFeatures == null) {
      this.grammaticalFeatures = new ArrayList<>();
    }
    this.grammaticalFeatures.add(grammaticalFeaturesItem);
    return this;
  }

   /**
   * The different forms are correlated with meanings or functions which we text as &#39;features&#39;
   * @return grammaticalFeatures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The different forms are correlated with meanings or functions which we text as 'features'")
  @JsonProperty(JSON_PROPERTY_GRAMMATICAL_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getGrammaticalFeatures() {
    return grammaticalFeatures;
  }


  @JsonProperty(JSON_PROPERTY_GRAMMATICAL_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGrammaticalFeatures(List<Object> grammaticalFeatures) {
    this.grammaticalFeatures = grammaticalFeatures;
  }


  public ThesaurusEntry homographNumber(String homographNumber) {
    
    this.homographNumber = homographNumber;
    return this;
  }

   /**
   * Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.
   * @return homographNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Identifies the homograph grouping. The last two digits identify different entries of the same homograph. The first one/two digits identify the homograph number.")
  @JsonProperty(JSON_PROPERTY_HOMOGRAPH_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHomographNumber() {
    return homographNumber;
  }


  @JsonProperty(JSON_PROPERTY_HOMOGRAPH_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHomographNumber(String homographNumber) {
    this.homographNumber = homographNumber;
  }


  public ThesaurusEntry senses(List<ThesaurusSense> senses) {
    
    this.senses = senses;
    return this;
  }

  public ThesaurusEntry addSensesItem(ThesaurusSense sensesItem) {
    if (this.senses == null) {
      this.senses = new ArrayList<>();
    }
    this.senses.add(sensesItem);
    return this;
  }

   /**
   * Complete list of senses
   * @return senses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Complete list of senses")
  @JsonProperty(JSON_PROPERTY_SENSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ThesaurusSense> getSenses() {
    return senses;
  }


  @JsonProperty(JSON_PROPERTY_SENSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSenses(List<ThesaurusSense> senses) {
    this.senses = senses;
  }


  public ThesaurusEntry variantForms(List<Object> variantForms) {
    
    this.variantForms = variantForms;
    return this;
  }

  public ThesaurusEntry addVariantFormsItem(Object variantFormsItem) {
    if (this.variantForms == null) {
      this.variantForms = new ArrayList<>();
    }
    this.variantForms.add(variantFormsItem);
    return this;
  }

   /**
   * Various words that are used interchangeably depending on the context, e.g &#39;aluminium&#39; and &#39;aluminum&#39;
   * @return variantForms
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Various words that are used interchangeably depending on the context, e.g 'aluminium' and 'aluminum'")
  @JsonProperty(JSON_PROPERTY_VARIANT_FORMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getVariantForms() {
    return variantForms;
  }


  @JsonProperty(JSON_PROPERTY_VARIANT_FORMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVariantForms(List<Object> variantForms) {
    this.variantForms = variantForms;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ThesaurusEntry thesaurusEntry = (ThesaurusEntry) o;
    return Objects.equals(this.grammaticalFeatures, thesaurusEntry.grammaticalFeatures) &&
        Objects.equals(this.homographNumber, thesaurusEntry.homographNumber) &&
        Objects.equals(this.senses, thesaurusEntry.senses) &&
        Objects.equals(this.variantForms, thesaurusEntry.variantForms);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grammaticalFeatures, homographNumber, senses, variantForms);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ThesaurusEntry {\n");
    sb.append("    grammaticalFeatures: ").append(toIndentedString(grammaticalFeatures)).append("\n");
    sb.append("    homographNumber: ").append(toIndentedString(homographNumber)).append("\n");
    sb.append("    senses: ").append(toIndentedString(senses)).append("\n");
    sb.append("    variantForms: ").append(toIndentedString(variantForms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

