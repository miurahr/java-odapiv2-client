/*
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package tokyo.northside.odapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import tokyo.northside.odapi.model.LexicalCategory;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Description of an entry for a particular part of speech and grammatical features
 */
@ApiModel(description = "Description of an entry for a particular part of speech and grammatical features")
@JsonPropertyOrder({
  LemmatronLexicalEntry.JSON_PROPERTY_GRAMMATICAL_FEATURES,
  LemmatronLexicalEntry.JSON_PROPERTY_INFLECTION_OF,
  LemmatronLexicalEntry.JSON_PROPERTY_LANGUAGE,
  LemmatronLexicalEntry.JSON_PROPERTY_LEXICAL_CATEGORY,
  LemmatronLexicalEntry.JSON_PROPERTY_TEXT
})
@JsonTypeName("LemmatronLexicalEntry")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2021-12-27T22:37:51.170+09:00[Asia/Tokyo]")
public class LemmatronLexicalEntry {
  public static final String JSON_PROPERTY_GRAMMATICAL_FEATURES = "grammaticalFeatures";
  private List<Object> grammaticalFeatures = null;

  public static final String JSON_PROPERTY_INFLECTION_OF = "inflectionOf";
  private List<Object> inflectionOf = new ArrayList<>();

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private String language;

  public static final String JSON_PROPERTY_LEXICAL_CATEGORY = "lexicalCategory";
  private LexicalCategory lexicalCategory;

  public static final String JSON_PROPERTY_TEXT = "text";
  private String text;

  public LemmatronLexicalEntry() { 
  }

  public LemmatronLexicalEntry grammaticalFeatures(List<Object> grammaticalFeatures) {
    
    this.grammaticalFeatures = grammaticalFeatures;
    return this;
  }

  public LemmatronLexicalEntry addGrammaticalFeaturesItem(Object grammaticalFeaturesItem) {
    if (this.grammaticalFeatures == null) {
      this.grammaticalFeatures = new ArrayList<>();
    }
    this.grammaticalFeatures.add(grammaticalFeaturesItem);
    return this;
  }

   /**
   * The different forms are correlated with meanings or functions which we text as &#39;features&#39;
   * @return grammaticalFeatures
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The different forms are correlated with meanings or functions which we text as 'features'")
  @JsonProperty(JSON_PROPERTY_GRAMMATICAL_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Object> getGrammaticalFeatures() {
    return grammaticalFeatures;
  }


  @JsonProperty(JSON_PROPERTY_GRAMMATICAL_FEATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGrammaticalFeatures(List<Object> grammaticalFeatures) {
    this.grammaticalFeatures = grammaticalFeatures;
  }


  public LemmatronLexicalEntry inflectionOf(List<Object> inflectionOf) {
    
    this.inflectionOf = inflectionOf;
    return this;
  }

  public LemmatronLexicalEntry addInflectionOfItem(Object inflectionOfItem) {
    this.inflectionOf.add(inflectionOfItem);
    return this;
  }

   /**
   * A grouping of the modifications of a word to express different grammatical categories
   * @return inflectionOf
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A grouping of the modifications of a word to express different grammatical categories")
  @JsonProperty(JSON_PROPERTY_INFLECTION_OF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Object> getInflectionOf() {
    return inflectionOf;
  }


  @JsonProperty(JSON_PROPERTY_INFLECTION_OF)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInflectionOf(List<Object> inflectionOf) {
    this.inflectionOf = inflectionOf;
  }


  public LemmatronLexicalEntry language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * IANA language code
   * @return language
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "IANA language code")
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLanguage() {
    return language;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLanguage(String language) {
    this.language = language;
  }


  public LemmatronLexicalEntry lexicalCategory(LexicalCategory lexicalCategory) {
    
    this.lexicalCategory = lexicalCategory;
    return this;
  }

   /**
   * Get lexicalCategory
   * @return lexicalCategory
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")
  @JsonProperty(JSON_PROPERTY_LEXICAL_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LexicalCategory getLexicalCategory() {
    return lexicalCategory;
  }


  @JsonProperty(JSON_PROPERTY_LEXICAL_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLexicalCategory(LexicalCategory lexicalCategory) {
    this.lexicalCategory = lexicalCategory;
  }


  public LemmatronLexicalEntry text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * A given written or spoken realisation of an entry.
   * @return text
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "A given written or spoken realisation of an entry.")
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setText(String text) {
    this.text = text;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LemmatronLexicalEntry lemmatronLexicalEntry = (LemmatronLexicalEntry) o;
    return Objects.equals(this.grammaticalFeatures, lemmatronLexicalEntry.grammaticalFeatures) &&
        Objects.equals(this.inflectionOf, lemmatronLexicalEntry.inflectionOf) &&
        Objects.equals(this.language, lemmatronLexicalEntry.language) &&
        Objects.equals(this.lexicalCategory, lemmatronLexicalEntry.lexicalCategory) &&
        Objects.equals(this.text, lemmatronLexicalEntry.text);
  }

  @Override
  public int hashCode() {
    return Objects.hash(grammaticalFeatures, inflectionOf, language, lexicalCategory, text);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LemmatronLexicalEntry {\n");
    sb.append("    grammaticalFeatures: ").append(toIndentedString(grammaticalFeatures)).append("\n");
    sb.append("    inflectionOf: ").append(toIndentedString(inflectionOf)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lexicalCategory: ").append(toIndentedString(lexicalCategory)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

